--------------------------------------------------------------------------------
# basic Git configuration
--------------------------------------------------------------------------------
## global Git options are stored in "~/.gitconfig"
## local Git options (specific to a repo) are stored in repo's ".git/config"

## list all variables set in config files:
git config -l

## list only global variables:
git config --global -l

## get the values of the variables matching a regex:
git config --get-regexp mail

## set the name and email associated with your commits:
git config --global user.name "John Git"
git config --global user.email johngit@example.com
--------------------------------------------------------------------------------

# clone a repo into a local directory:
git clone git@www.molpro.net:Molpro molpro-pauli

# clone a repo containing other repos (submodules) into its default directory:
git clone --recursive git@gitlab.com:dalton/dalton.git

# simplify URLs using the "~/.ssh/config" configuration file (provided the SSH private key is in "~/.ssh/id_rsa.git" and the corresponding SSH public key is in "~/.ssh/id_rsa.git.pub"):
------------------------------------------------------------
~/.ssh/config
------------------------------------------------------------
(...)
# Molpro
Host molpro
User git
HostName www.molpro.net
IdentityFile ~/.ssh/id_rsa.git

# Bitbucket
Host bitbucket
User git
HostName bitbucket.org
IdentityFile ~/.ssh/id_rsa.git

# GitLab
Host gitlab
User git
HostName gitlab.com
IdentityFile ~/.ssh/id_rsa.git
------------------------------------------------------------
# the "IdentityFile" line is not needed when a standard location ("~/.ssh/id_rsa") key is used
# clone a code using above definitions:
git clone --recursive gitlab:dalton/dalton.git

--------------------------------------------------------------------------------
# SSH keys and ssh-agent
--------------------------------------------------------------------------------
## the key which is not in the standard location won't be seen by the remote Git repos unless it has been added to the ssh-agent
## ssh-agent normally isn't started on boot
## add the following lines to your "~/.bash_profile" to start the ssh-agent (or just the last line if the agent is started by a system):
------------------------------------------------------------
~/.bash_profile
------------------------------------------------------------
(...)
# ssh keys for remote Git repos
trap '[[ -n $SSH_AGENT_PID ]] && eval $(ssh-agent -k &> /dev/null)' 0
eval $(ssh-agent)
ssh-add ~/.ssh/id_rsa.git &> /dev/null
------------------------------------------------------------

## list the keys represented by the authentication agent:
ssh-add -l

## to rename a pair of keys, first remove it from the ssh-agent, and add the pair with a new name:
ssh-add -d ~/.ssh/id_rsa.molpro
mv -iv ~/.ssh/id_rsa.{molpro,git}
mv -iv ~/.ssh/id_rsa.{molpro,git}.pub
ssh-add ~/.ssh/id_rsa.git
## adjust "~/.bash_profile" and "~/.ssh/config" files accordingly
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# Git operates on several levels:
## (A) working tree → (B) staging area (index) → (C) local Git repo → (D) remote Git repo
## (A) is a working directory contents where you actually modify files
## (B) collects info on what will go in the next commit
## (C) contains all history up to the last commit (it collects all the data which e.g. would be copied from the repo with "git clone")
## (D) tracks the same project as (C), but resides somewhere else

# the Git workflow:
## (1) you modify files in a working tree
## (2) with "git add" you selectively add just the changes (new or modified files) you want to be a part of a next commit, thus you stage the changes to the index: (A) → (B)
## (3) with "git rm" you selectively remove files from the working tree and from the index
## (4) with "git commit" you record the changes staged in the index to the Git repo: (B) → (C)
## if (2) doesn't involve new files addition (just the file contents modification), (2)−(4) can be accomplished in a single step with "git commit -a": (A) → (B) → (C)
## (5) with "git push" you record the changes to the remote repo: (C) → (D)

# a file in (A) is either:
## tracked, then it can be:
### unmodified (committed) − it hasn't been changed relative to the last commit, its same version is in (C)
### modified − it's been changed relative to the last commit in (C), but not yet staged
### staged − its modification has been recorded in the index, so it's also in (B)
## untracked, since it:
### is ignored due to rules in ".gitignore" (note that the rules don't affect already tracked files)
### hasn't been staged and the last commit doesn't include this file (e.g. it's a newly created file)

# show the working tree status:
git status
# also show individual files in untracked directories and ignored files:
git status -uall --ignored

# show modified files:
git diff

# show staged files (what will be committed with "git commit"):
git diff --cached
# or:
git diff --staged

# show both modified and staged files (what will be committed with "git commit -a"):
git diff HEAD

# if you only use "git commit -a", you skip staging changes, thus "git diff" and "git diff HEAD" yield same results
# however, if you add a new file, you need to stage it:
git add new_file
# and then commit it:
git commit
# thus you can't skip a staging part in this case

# if a file is removed with
rm file_del
# it's no longer in (A) and is reported as deleted and not staged for commit
# at this point you can restore a file (e.g. if you deleted it by accident):
git checkout # lists deleted files
git checkout file_del
# but if you want to actually remove a file from a repo, stage its removal with:
git rm file_del
# which has the same effect regardless of whether or not the previous "rm file_del" command was used: the file is no longer in (A) and is reported as deleted and staged for commit, so commit the change:
git commit
# or do both of the above in one go:
git commit -a
# now the file's gone, but it's history up to a deletion is recorded in (C), thus "file_del" can be restored by checking it from a specific commit, e.g. from the one before its deletion (the penultimate one):
git checkout HEAD^ file_del
# "file_del" is now staged

# untrack a tracked file (useful if you forgot to add something to ".gitignore" and accidentally staged or committed a file):
git rm --cached file_ut
# now "file_ut" is in still in (A) and its deletion is staged in (B), and you can commit the change:
git commit
# "file_ut" is now untracked

# discard changes on a modified file:
git checkout file_mod
# discard changes on an already staged file:
git reset HEAD file_mod # unstages a file, "file_mod" is now modified
git checkout file_mod

# undo all changes in the tracked files in the working tree and in the index (e.g. introduced with "git pull" which led to merge conflicts), reverting them to the last commit:
git reset --hard HEAD

# rename a file:
mv -iv file1 file2
# now "file1" is deleted and "file2" is untracked, so we need to stage the changes:
git rm file1
git add file2
# all three above commands can be replaced with:
git mv -v old new
# which stages a rename automatically
# Git tracks contents not files, so it detects a rename after those operations, now just commit the change:
git commit

# copy a file from the "source_br" branch into the "working_br" branch:
git checkout working_br # if not already at "working_br"
git checkout source_br file_cp
# "file_cp" is now staged if its versions differ between the two branches

# dry-run removing non-ignored untracked files and directories from the working tree:
git clean -dn
# actually remove them:
git clean -df

# dry-run removing all (including ignored) untracked files and directories from the working tree:
git clean -dxn
# actually remove them:
git clean -dxf
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# creating a Git repo for a working project
--------------------------------------------------------------------------------
## go to the working directory of your project and initialize a Git repo:
git init
## the name of the working directory is irrelevant and can be changed at any time
## you can name your project by editing the ".git/description" file, this name is used by some web interfaces

## create a ".gitignore" file with the filter rules

## add all the contents of the working directory (".") but ignored files to the repo:
git add .

## record a current state as a first commit:
git commit -m "initial commit"

## you can create your own branch which you can share through the remote Git repo instead of working with a default "master" branch:
git checkout -b my_branch
## creating a branch is very useful if lots of people work on the same code, so that people use their own branches for their contributions

## now you can add a remote Git repo that the other users can access and through which you can share your changes
## initialize a bare Git repo (repo with only Git objects and no working tree) in a directory on a remote machine:
[remote_machine]$ cd ~/git_repos/work_repo.git
[remote_machine]$ git init --bare
## it's useful to add the name (e.g. "my_cluster") and definition of the remote machine to the "~/.ssh/config" file

## go back to a working directory on your local computer and add "my_repo" remote repo at "my_cluster":
git remote add my_repo my_cluster:git_repos/work_repo.git

## switch to your branch and push it to the remote repo:
git checkout my_branch
git push -u my_repo my_branch
## using "-u" makes "my_repo" and "my_branch" default options for argument-less "git push" and "git pull" commands

## now you've got a history of your branch recorded at the remote repo
## but "HEAD" at "my_repo" points to "refs/heads/master" ("master" branch) by default
## if "my_branch" ≠ "master", you need to point "HEAD" to "my_branch":
[remote_machine]$ cd ~/git_repos/work_repo.git
[remote_machine]$ git symbolic-ref HEAD refs/heads/my_branch
## a default clone branch is what "HEAD" points to, thus this way you can change a default clone branch
## the effect of the above command is the same as that of "git checkout my_branch", but the latter can't be run in a bare repo since it doesn't contain a working tree
## on Git severs (e.g. Bitbucket) a default clone branch can be changed via a web interface

## you can add more remote repos, e.g. use the Bitbucket website (where you log in in initialize a new repo via a web interface):
git remote add bitbucket bitbucket:luke/molpro_lr_repo # "bitbucket" defined above in the "~/.ssh/config" file
git push bitbucket my_branch
## this way "bitbucket" contains only "my_branch", which we've just pushed

## you can rename a remote repo, especially when it's called "origin" (a default name given to a remote repo in a local cloned repo):
git remote rename origin my_repo

## you can rename a Git repo directory on a remote machine:
[remote_machine]$ mv -iv ~/git_repos/{work_repo,super_repo}.git
## you need to change the remote URL in your local repo accordingly:
git remote set-url my_repo my_cluster:git_repos/super_repo.git

## show remote repos:
git remote -v

## now you can share your work with others: you can add their public keys to your cluster or grant access via a web interface e.g. on your project Bitbucket website, and ask them to clone the code:
git clone my_cluster:git_repos/work_repo.git my_work_dir
## of course, "my_cluster" needs to be substituted with the full remote machine address if not configured in the "~/.ssh/config" file

## if you've added multiple files and directories to your working tree, you can stage them in one go:
git add .
## but make sure your ".gitignore" properly takes care of files generated through the compilation process so that you don't stage those files as well with this command

## stage an ignored file:
git add -f ignored_file

## commit your changes and send them to a remote repo:
git commit -a
git push

## get the newest version from the remote repo:
git pull

## list branches: all, local, remote ones:
git branch -a
git branch -l
git branch -r

## create a local "2012" branch to track a remote "origin/2012.1" branch:
git checkout -b 2012 origin/2012.1

## delete a local "2012" branch (first you need to switch to another branch):
git checkout master
git branch -D 2012

## rename the "old_branch_name" branch you're on:
git branch -m new_branch_name
## now you need to delete the "old_branch_name" from a remote repo and push the "new_branch_name":
git push my_repo :old_branch_name new_branch_name
## but this will result in an error if "old_branch_name" is the default branch in a remote repo, then:
git push my_repo new_branch_name
## change a default branch in a remote repo to "new_branch_name", either with:
[remote_machine]$ git symbolic-ref HEAD refs/heads/new_branch_name
## or via a web interface, and finally:
git push my_repo :old_branch_name

## go back to a specific commit:
git checkout 5fdac
## commit names are 40-byte SHA-1 hexadecimal strings, but it suffices to specify leading substring that is unique within the repo
## now you're in a detached "HEAD" state: "HEAD" refers to a specific commit
## normally "HEAD" refers to the branch, and always updates to the tip of the branch with new commits
## new commits in a detached "HEAD" state also update "HEAD" to refer to the last commit, but when no branch nor tag are created in this development line, they will be eventually deleted by Git, thus it's better to create a branch:
git checkout -b dev_branch # now "HEAD" refers to "dev_branch"
## you can go back to a specific branch from a detached "HEAD" state:
git checkout my_branch # now "HEAD" refers to "my_branch"

## list submodules in a repo:
git submodule

## initialize all submodules in a repo (e.g. if cloned without "--recursive" option):
git submodule update --init --recursive
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# debugging: looking for a commit which introduced a bug
--------------------------------------------------------------------------------
## a current revision (commit) is bad:
git bisect start
git bisect bad

## a "good_commit_name" revision is good:
git bisect good good_commit_name

## compile, check if OK, then use:
git bisect good # if OK
git bisect bad  # if not OK
git bisect skip # if impossible to verify (e.g. the revision doesn't compile)

## see the current commit:
git show HEAD

## continue until there are no more revisions to bisect, you'll be on the revision which first broke the code

## save the bisecting log:
git bisect log > bisect_log

## quit bisecting and go back to the commit checked out before "git bisect start":
git bisect reset
--------------------------------------------------------------------------------

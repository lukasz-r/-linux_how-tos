================================================================================
# various Unix/Linux/Mac OS X tips by Łukasz Rajchel <lrajchel1981@gmail.com>
================================================================================

================================================================================
basic concepts
================================================================================
# filename − final component of a pathname:
	pathname: /home/luke/.bash_profile
	filename: .bash_profile

# abstraction − a technique for arranging complexity of computer systems so that the user works with simpler concepts without going into unnecessary details of the hardware structure
# the essence of abstraction is preserving information that is relevant in a given context, and forgetting information that is irrelevant in that context

# B = byte, b = bit
# 1 B = 8 b
# 1 kB = 8 kb = 10³ B (kilobyte)
# 1 KiB = 8 Kib = 2¹⁰ B = 1024 B (kibibyte)

================================================================================
user administration
================================================================================
--------------------------------------------------------------------------------
# users and groups
--------------------------------------------------------------------------------
## user identifier (UID) − a unique positive integer assigned to each user
## each user is identified to the system by its UID, and user names are generally used only as an interface for humans
## UID = 0 for a root user
## UIDs 1 through 99 are traditionally reserved for special system users (pseudo-users): wheel, daemon, etc.
## group identifier (GID) − a numeric value used to represent a specific group
## each user must be a member of at least one group and can be a member of multiple groups
## primary group − a default group used when a user creates a new file or logs in
## the primary group's name is usually the same as the user name
## secondary (supplementary) group − a group to which a user belongs which is not a primary group
## "/etc/passwd": UIDs are in the 3rd field, and GIDs are in the 4th field
## "/etc/group": list of the groups in the system
## "/etc/login.defs": minimum UID for newly created regular users (usually UID_MIN = 1000) etc.
--------------------------------------------------------------------------------

# list all users in the system:
getent passwd
# or:
compgen -u

# list all users who can log in:
grep -v nologin /etc/passwd

# list all groups in the system:
compgen -g

# list all groups and their members in the system:
getent group

# list all users in the "wheel" group:
getent group wheel

# print user and group information for the current user:
id

# print the groups a user is in:
groups theochem

# add the user to the supplementary group:
sudo usermod -aG gaussian theochem

# change a default user shell:
chsh -s /bin/bash

================================================================================
processes
================================================================================
--------------------------------------------------------------------------------
# processes and signals
--------------------------------------------------------------------------------
## process − a collection of threads
## thread identifier (TID) − a number uniquely identifying a thread
## process identifier (PID) − a number uniquely identifying a process
## an ordinary process has a single thread with TID = PID
## child process − a process created by another process (the parent process)
## parent process − a process that has created one or more child processes
## parent process identifier (PPID) − PID of the parent of a process
## process group − a collection of one or more processes
## process group identifier (PGID) − a number uniquely identifying a process group
## process group leader − a process for which PID = PGID
## a child process inherits a process group from its parent process
## session − a collection of process groups, usually set up by a login process
## session identifier (SID) − a number uniquely identifying a session
## session leader − a process for which PID = SID
--------------------------------------------------------------------------------
## teletype (TTY) − a text terminal to interact with a host
## controlling TTY (CTTY) − a terminal on which one is logged in
## the processes which are descendants of the CTTY are usually members of the same session
## current terminal PGID − a PGID of a controlling TTY
## synchronous command execution: you wait for a command to finish before moving on to another task
### real-life example: you're in a queue to get a movie ticket − you cannot get one until everybody in front of you gets one
## asynchronous command execution: you can move on to another task before a command finishes
### real-life example: you order your food in a restaurant, while other people can also order their food and neither you nor they have to wait for other people's food to be cooked before they can make orders − the workers are continuously cooking, serving, and taking orders and people get their food as soon as it is cooked
--------------------------------------------------------------------------------
## signal − an asynchronous notification sent to a process or a thread in order to notify it of an event that occurred
## signal examples:
------------------------------------------------------------
### signal   action comment                  TTY shortcut
------------------------------------------------------------
### SIGINT   Term   interrupt from keyboard  <CTRL>+"c"
### SIGTSTP  Stop   stop typed at terminal   <CTRL>+"z"
### SIGTERM  Term   termination signal
### SIGKILL  Term   kill signal
### SIGSEGV  Core   invalid memory reference
### SIGCONT  Cont   continue if stopped
------------------------------------------------------------
### Term − terminate the process
### Core − terminate the process and dump core
### Stop − suspend the process
### Cont − continue the process if it is currently suspended
### the TERM signal kills processes that do not catch it
### the KILL signal kills all the processes
------------------------------------------------------------
## foreground process − a member of a current terminal process group
## background process − a process outside a current terminal process group (though usually still a member of a CTTY session)
## foreground process receives keyboard-generated TTY signals
## background process is immune to keyboard-generated TTY signals
## at most one process group can be in the foreground of the session
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# BASH job control
--------------------------------------------------------------------------------
## job − one or more processes started with a pipeline
## current job − a job stopped (suspended) while it was in the foreground or started in the background
## job specification:
### "%%" or "%+" − a current job
### "%-" − a previous job
## special parameters related to the job control:
### "$$" − a PID of the shell
### "$0" − the name of the shell or shell script
### "$!" − a PID corresponding to the current job

## start a job asynchronously (in the background):
molpro H2O.inp &
------------------------------------------------------------
output
------------------------------------------------------------
[1] 28055
------------------------------------------------------------
# where:
## 1 − job number
## 28055 − PID of the last process in the pipeline associated with job number 1

## list the active jobs:
jobs

## suspend a job started synchronously (in the foreground) and move it to the background:
<CTRL>+"z"
## and
bg %+
## or:
%+ &
## or simply:
bg

## move a current job to the foreground:
fg %+
## or:
%+
## or simply:
fg

## move a job number 2 to the foreground:
fg %2
## or:
%2
--------------------------------------------------------------------------------

# print the filename of the CTTY:
tty

# show jobs' PIDs, PGIDs, SIDs and CTTYs ("?" in the TTY field means job has no CTTY):
ps aux -j

# check system resources interactively:
htop
# press "t" to display a tree of processes, or:
pstree

# show only the processes of a given user:
htop -u luke
# or:
pgrep -au luke

# simulate top with ps, sort by memory:
ps aux --sort -rss | more

# show child processes of a parent process with a PID of 1653:
pgrep -aP 1653

# send a TERM signal (SIGTERM) to all processes in the current process group:
kill 0

# send a KILL signal (SIGKILL) to a processes group with a given PGID:
kill -KILL -1200
# or:
kill -9 -1200
# "-9" means signal number 9 (a KILL signal)

# send a KILL signal (SIGKILL) to a processes with a given PID:
kill -9 1200

# kill the process group to which the "molpro" process belongs:
killall -9 -g molpro

--------------------------------------------------------------------------------
# process permissions
--------------------------------------------------------------------------------
## every process has two UIDs associated with it:
### real UID (RUID) − UID of the user who launched the process
### effective UID (EUID) − UID seen by an operating system to determine what resources the process can access
## usually RUID = EUID
## every process also has GIDs associated with it:
### real GID (RGID) − GID of the primary group of the user who launched the process
### effective GID (EGID) is analogous to EUID
### a set of supplementary GIDs
## the persona of the process − the EUID, EGID and supplementary GIDs of the process
## note that the PID and the persona of the process are different things: a single user can create many processes which share the same EUID and EGID, but which differ in PIDs

## a login shell starts with a persona consisting of:
### the UID of the user
### the GID of the user's primary group
### the GIDs of the user's secondary groups
## a child process normally inherits persona from its parent process

## set UID upon execution (setuid, SUID) / set GID upon execution (setgid, SGID) − access rights flags that allow users to run an executable with the permissions of the executable's owner / group, respectively
## if a program with a setuid flag set is executed, its EUID = UID of the program file owner
## thus a normal user running a setuid-set executable file gains the privileges of the owner of the file (commonly root) within the created process
## if a program with a setgid flag set is executed, its EGID = GID of the program file group
## thus a normal user running a setgid-set executable file gains the privileges of the group of the file within the created process
--------------------------------------------------------------------------------

# print PIDs, UIDs and GIDs of the processes:
ps -eo pid,user,ruid,euid,rgid,egid,comm

================================================================================
memory
================================================================================
--------------------------------------------------------------------------------
# hardware
--------------------------------------------------------------------------------
## clock speed = clock frequency = clock rate (ν) − number of clock cycles per unit of time
## clock cycle (τ) − the amount of time between two cycles:
### τ = 1 / ν
### e.g. ν = 1000 MHz ⇒ τ = 1 ns
## (memory) transfer rate (νtr) − number of transfers per unit of time:
### νtr = ntr * ν
### ntr − number of transfers per clock cycle

## (memory) bandwidth (μtr) − amount of memory transferred per unit of time
## (computer) bus − a communication system that transfers data between components inside a computer or between computers
## bus width (bw) − maximum amount of information which can be contained in a single transfer carried over the bus
## buses are usually 32-bit (bw = 4 B) and 64-bit (bw = 8 B)

## μtr = bw * νtr = ntr * bw * ν
## [ν] = [νtr] = 1/s = Hz
## [bw] = B
## [μtr] = B/s

## non-volatile memory (NVM) − a type of computer memory that can retain information even after being power cycled (turned off and back on)
## volatile memory (VM) − a type of computer memory that needs constant power in order to prevent data from being erased

## random-access memory (RAM) − a form of computer data storage that stores data and machine code currently being used
## trw − time required to read and write data:
### for a RAM device, trw is almost the same irrespective of the physical location of the data inside the memory device
### for data storage media such as hard disks and CDs, trw depends significantly on the physical location of the data inside the medium, due to mechanical limitations (e.g. media rotation speeds)

## dynamic RAM (DRAM) − a type of volatile semiconductor memory that needs to be be periodically refreshed
## DRAM stores each bit of data in a separate tiny capacitor within an integrated circuit
## the capacitor in DRAM can either be charged (bit 0) or discharged (bit 1)
## the electric charge on the DRAM capacitors slowly leaks off, so without intervention the data on the chip is soon lost
## to prevent information loss, DRAM requires an external memory refresh circuit which periodically rewrites the data in the capacitors, restoring them to their original charge, and that's why it's called dynamic

## static RAM (SRAM) − a type of volatile semiconductor memory that doesn't need to be be periodically refreshed
## SRAM is faster and more expensive than DRAM
## SRAM is used for CPU cache
## SRAM does not need continuous electrical refreshes to keep its contents (it's not dynamic), but it still requires constant current to sustain the difference in voltage not too loose the contents (it's volatile)

## synchronous DRAM (SDRAM) − DRAM in which the operation of its external pin interface is coordinated by an externally supplied clock signal

## dual in-line memory module (DIMM) − a series of DRAM integrated circuits, mounted on a printed circuit board
## small outline DIMM (SO-DIMM) − a smaller alternative to a DIMM, roughly half the size of a regular DIMM, used in laptops, notebooks, etc.
## DIMMs are inserted into DIMM slots which must correspond to the number of pins and notches on the DIMM insertable edge (e.g. a 204-pin SO-DIMM with a single notch)

## single data rate SDRAM (SDR SDRAM) − SDRAM that can accept one command and transfer one word of data per clock cycle
## double data rate SDRAM (DDR SDRAM) − SDRAM that uses double pumping (transferring data on both the rising and falling edges of the clock signal) to double data bus bandwidth without a corresponding increase in clock frequency
## there are several generations of DDR SDRAM (DDRngen SDRAM, ngen = 1, 2, 3, 4, ...)

## ν(SDRAM) − SDRAM's clock frequency
## if ν(DDR SDRAM) = ν(SDR SDRAM), νtr(DDR SDRAM) ≈ 2 * νtr(SDR SDRAM) due to the double pumping
## νtr is given as DDRngen-(νtr / MHz), and (ntr = 2, νtr = 2 * ν, τ = 2 / νtr) for DDR SDRAM
### e.g. for DDR3-2000, νtr = 2000 MHz, ν = 1000 MHz and τ = 1 ns
## μtr is given as PCngen-μtr/(MB/s)
### e.g. for 64-bit bus and DDR4-2400, μtr = 8 B * 2400 MHz = 19200 MB/s = 19.2 GB/s, so it's PC4-19200

## memory timings = RAM timings describe the performance of SDRAM using usually four parameters in units of clock cycles (τ) separated with dashes that specify the latencies (time delays) affecting RAM speed: lower numbers mean faster performance
## absolute system performance is measured by τAL (actual latency):
### τAL = nCL * τ = 2 * nCL / νtr
### nCL − the first number in memory timings list (column access strobe latency number), e.g. given as CL7 (nCL = 7)
### e.g. for DDR3-2000 7-8-8-24, τ = 1 ns and τAL = 7 * τ = 7 ns
### e.g. for DDR3-2666 9-8-8-24, τ ≈ 0.75 ns and τAL = 9 * τ ≈ 6.75 ns
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# kernel parameters
--------------------------------------------------------------------------------
## SHMMAX − maximum size of a single shared memory segment in bytes
## SHMALL − total size of shared memory segments system wide in pages
## ceil(SHMMAX / PAGE_SIZE) <= SHMALL < TM / PAGE_SIZE
### TM − total physical memory on the system in bytes
### e.g. SHMALL = ceil(alpha * TM / PAGE_SIZE), alpha = 0.9
--------------------------------------------------------------------------------

# get the memory page size in bytes:
getconf PAGE_SIZE

# check the system SHMMAX:
sysctl -a | grep shmmax

# dynamically change SHMMAX:
sysctl -w kernel.shmmax=2147483648

# permanently change SHMMAX: in "/etc/sysctl.conf" edit the line:
kernel.shmmax = 2147483648
# SHMALL can be adjusted in the same way (kernel.shmall)

# get shared memory info:
ipcs -lm
------------------------------------------------------------
output
------------------------------------------------------------
------ Shared Memory Limits --------
max number of segments = 4096
max seg size (kbytes) = 131072
max total shared memory (kbytes) = 8388608
min seg size (bytes) = 1
------------------------------------------------------------
# where:
## 131072 = SHMMAX / 2¹⁰
## 8388608 = SHMALL * PAGE_SIZE / 2¹⁰

================================================================================
locale / regional settings
================================================================================
# locale − a set of parameters that defines the user's language, region, etc.

# show current settings of the system locale and keyboard mapping:
locale
# or:
localectl status

================================================================================
man / info
================================================================================
# look for a specific string within an info page:
info make | grep -i fflags

================================================================================
awk / sed / tr / cut
================================================================================
--------------------------------------------------------------------------------
# sed
--------------------------------------------------------------------------------
## replace some patterns in a file and write changes directly to that file:
sed -i 's/old/new/g' file

## remove lines containing a specific string, say "hello":
sed '/hello/d' file

## convert pattern to lowercase:
sed 's/Login/\L&/g' file

## remove lines containing repeated characters, say 1 to 100 star signs ("*"):
sed '/\*\{1,100\}/d' file

## print lines from 730th to the last one of a file:
sed -n '730,$p' file

## insert variable with newlines into a given line of a file:
-------------------------------------------------------
script.sh
-------------------------------------------------------
#!/bin/bash
(...)
# var is a variable with newline characters (multiline variable)
# insert var in a file "$out" at line number n
n=3
echo "$var" | while read line; do
	sed -i "$n i\\$line" "$out"
	((n++))
done
-------------------------------------------------------
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# awk
--------------------------------------------------------------------------------
## user function definitions can go anywhere, e.g. in the beginning of the script

## executable awk scripts: use
#!/usr/bin/awk -E
## in the first line

## print nth line of a file:
n=100
awk "NR == $n" input.txt

## perform an action for the first line of the input and another action for other lines:
NR == 1 {print $1}
NR > 2 {print $2}

## pass a function as an argument to a function:
function stats(num, transform) {
	return @transform(num)
}
stats(num, "age_transform")

## given a plain text file containing a list in a form:
-------------------------------------------------------
input
-------------------------------------------------------
1. one ...
2. two ...
(...)
-------------------------------------------------------
## create a html file with a html list − use awk to replace each number (1., 2., ...) with "<LI>":
awk '{if ($1 ~ /^[0-9]/) $1 = "<LI>"; print}' input > output
## this changes only lines beginning with a number possibly following whitespace
## to make a list visible in html, wrap the list in "<OL>" and "</OL>" tags
## note that
awk '/^\s*[0-9]/ {$1 = "<LI>"; print}' input > output
## would only print the lines beginning with a number possibly following whitespace (here we need to add "\s*"), so we need to use "if" as above to print other lines as well

## for lines containing at least 5 "=" characters cut everything after 80th column:
awk '/={5,}/ {print substr($0, 1, 80)}' file

## ... do the above thing, but also print all other lines:
{if ($0 ~ /={5,}/) print substr($0, 1, 80); else print $0}

## for a LaTeX file with comments below commands, move the comments above the commands:
./script.awk input.sty > output.sty
-------------------------------------------------------
script.awk
-------------------------------------------------------
#!/usr/bin/awk -E

BEGIN { RS = ""; FS = "\n" }

{
	if ($NF ~ /^\s*%/) {
		print $NF
		for (i = 1; i < NF; i++) print $i
	} else
		print
	print RS
}
-------------------------------------------------------

## convert a table to LaTeX format (note that the use of '$1 = $1' makes awk recompute the whole record, $0, with the values of OFS and ORS):
./script.awk tab.dat > tab.tex
-------------------------------------------------------
script.awk
-------------------------------------------------------
#!/usr/bin/awk -E

BEGIN {
	OFS = " & "
	ORS = " \\\\\n"
}
$1 = $1
-------------------------------------------------------

## convert a table to LaTeX format like above, but additionally print the numbers in specific format:
./script.awk tab.dat > tab.tex
-------------------------------------------------------
script.awk
-------------------------------------------------------
#!/usr/bin/awk -E

function isnum(x) {
	return(x == x + 0)
}

BEGIN {
	CONVFMT = "%.2g"
	OFS = " & "
	ORS = " \\\\\n"
}

{
	for (i = 1; i <= NF; i++)
		if (isnum($i))
			$i = $i + 0
		else
			$i = $i
	print
}
-------------------------------------------------------
--------------------------------------------------------------------------------

# change all spaces into newlines in a file:
tr -s '[:space:]' '\n' < inp

# remove all letters from a file:
tr -d '[:alpha:]' < inp

# extract all digits from a file into one big number:
tr -dc '[:digit:]' < inp

# add numbers of a one-column file:
echo $(tr "\n" "+" < file) 0 | bc

# remove parts of a file after last dot (.) in each line:
rev < file | cut -d "." -f 1 --complement | rev

# print nth character of a string:
echo axy10eRf | cut -c 7

# note that "cut" doesn't reorder fields, thus "cut -f 1,2" and "cut -f 2,1" are equivalent

================================================================================
Bugzilla
================================================================================
# strings that are automatically linkified in the comments:
bug 12345
comment 7
bug 23456, comment 53
attachment 4321

================================================================================
disk partitioning and checking
================================================================================
--------------------------------------------------------------------------------
# hardware
--------------------------------------------------------------------------------
## hard disk drive (HDD) − a non-volatile storage device using one or more rapidly rotating rigid disks (platters) coated with magnetic material to store and retrieve digital information
## solid-state storage (SSS) − a type of non-volatile storage using only electronic circuits, without any involvement of moving mechanical parts, to store and retrieve digital information
## solid-state drive (SSD) − a SSS-based device

## disk track − annulus (a region between R₁ and R₂ radii, R₁ < R₂) on the surface of a HDD on which data is magnetically recorded and from which it's read
## disk track is thus a physical division of data in a HDD
## disk sector − a smallest unit of a HDD, a subdivision of a disk track holding a fixed amount of user-accessible data
## page − a smallest unit of a SSD, composed of several memory cells

## block − a sequence of bytes or bits, usually containing some whole number of records
## for HDD, blocks are an abstraction over disk sectors possibly encompassing multiple sectors
## for SSD, blocks are an abstraction over pages possibly encompassing multiple pages
## block size − a maximum length of a block (e.g. 512 B)

## filesystem − a method to control how data is stored and retrieved

## get the disk sector size:
sudo fdisk -l /dev/sda | grep "Sector size"

## get the disk block size:
sudo blockdev --getbsz /dev/sda
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# disk formatting proceeds in three stages:
--------------------------------------------------------------------------------
## low-level formatting − basic medium preparation
## disk partitioning − creation of one or more regions (partitions) so that an operating system can manage information in each region separately
## high-level formatting − generating a new filesystem on a partition (a partition with a filesystem is often referred to simply as a filesystem by most Linux commands)
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# create a FAT32 and ext4 filesystems on an external USB disk:
--------------------------------------------------------------------------------
## create a GPT (a modern partition table) and partitions with gdisk using options:
### o (new GPT)
### n (new partition)
### and follow instructions to create the two partitions

## create filesystems checking the partitions for bad blocks beforehand:
sudo mkfs.vfat -c -F 32 -n Share /dev/sdc1
sudo mkfs.ext4 -cc -m 0 -L Data /dev/sdc2
--------------------------------------------------------------------------------

# force the kernel to re-read the partition table without rebooting (e.g., after using gdisk):
sudo partprobe

# get info on a filesystem:
sudo tune2fs -l /dev/sdb1

# free reserved space on a partition and change its label (this won't destroy the data):
sudo tune2fs -m 0 -L ŁR_Seagate /dev/sdb1

# check and repair a filesystem including a non-destructive read-write bad blocks test:
sudo umount /dev/sdb1
sudo fsck -vcck /dev/sdb1

# check if a directory is a mountpoint:
usb_disk=~/my_disk
mountpoint -q "$usb_disk" && echo "$usb_disk is a mountpoint"

--------------------------------------------------------------------------------
# redundant array of independent disks (RAID)
--------------------------------------------------------------------------------
## create RAID0 (striping, for faster I/O operations) using two identical disks − e.g. "/dev/sdb" and "/dev/sdc":

### create RAID partitions on the two devices − e.g. for "/dev/sdb":
sudo fdisk /dev/sdb
### enter "n", "p", "1", "t", "fd" − to set the partition type to "RAID autodetect"

### create a RAID device:
sudo mdadm --create /dev/md0 -n 2 -l raid0 /dev/sd{b,c}1

### create a filesystem on a RAID device:
sudo mkfs.ext4 -m 0 -L Data /dev/md0

### add the info to the config file:
sudo mdadm --detail --scan >> /etc/mdadm.conf

### mount the RAID partition − e.g. add the appropriate line to "/etc/fstab":
/dev/md0	/scratch	ext4	defaults	1	2
### and then
sudo mount -a

## get info on a RAID device:
sudo mdadm -D /dev/md0

## test RAID array speed:
sudo cd /scratch && sudo dd if=/dev/zero of=output bs=8k count=256k && rm output
## we assume "/scratch" is on a RAID device
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# logical volume management (LVM)
--------------------------------------------------------------------------------
## create "data" volume group using "/dev/sda4" and "/dev/sdb2" partitions, and then create "data_a" and "data_b" logical volumes with ext4 filesystems:

### create "/dev/sda4" and "/dev/sdb2" partitions marked as "Linux LVM", e.g. with gdisk

### create "data_a" and "data_b" logical volumes:
sudo pvcreate /dev/sda4 /dev/sdb2
sudo vgcreate data /dev/sda4 /dev/sdb2
sudo lvcreate -L 200G -n data_a data
sudo lvcreate -l 100%FREE -n data_b data
### (logical volumes are called "/dev/data/data_a" or "/dev/mapper/data-data_a", which are symbolic links to "/dev/dm-n" files)

### create filesystems:
sudo mkfs.ext4 -m 0 -L Data_a /dev/data/data_a
sudo mkfs.ext4 -m 0 -L Data_b /dev/data/data_b

### mount the logical volumes:
sudo mount /dev/data/data_a /mnt/data_a
sudo mount /dev/data/data_b /mnt/data_b

### logical volumes can be mounted automatically by adding appropriate lines to "/etc/fstab":
/dev/mapper/data-data_a	/mnt/data_a	ext4	defaults	1	2
/dev/mapper/data-data_b	/mnt/data_b	ext4	defaults	1	2
### and then
sudo mount -a

### activate/deactivate "data" volume group (deactivation is necessary before unplugging external LVM drive containing already unmounted logical volumes to avoid I/O errors):
sudo vgchange -ay data # activation
sudo vgchange -an data # deactivation

## extend a "home" logical volume mounted in "/home" so that it takes up all the free space remaining on its volume group, "vg":
sudo umount /home
sudo lvextend -l +100%FREE -r /dev/vg/home
sudo mount /home

## reduce a "home" logical volume mounted in "/home" contained in a "vg" volume group to 10 GiB:
sudo umount /home
sudo lvreduce -L 10G -r /dev/vg_mcb/scratch
mount /home
--------------------------------------------------------------------------------

# try to restore the damaged disk, e.g. CD-ROM:
ddrescue -n -b 2048 /dev/cdrom cdimage.img cdlog
ddrescue -d -b 2048 /dev/cdrom cdimage.img cdlog

# measure disk speed:
sudo hdparm -tT /dev/sdd1

# get partition UUID:
sudo blkid /dev/sdc1

================================================================================
encryption / keys (GnuPG)
================================================================================
# the keys are stored in "~/.gnupg"

# encrypt a file:
gpg2 -c file
# decrypt a file:
gpg2 file.gpg2

# create a gpg2 key:
gpg2 --gen-key
# list gpg2 keys (with their key_id's):
gpg2 --list-keys
# send a gpg2 key to a server:
gpg2 --send-key key_id
# look for a gpg2 key by user email:
gpg2 --search-key user@server
# sign a gpg2 key of a user:
gpg2 --sign-key key_id
# export a public key to a file:
gpg2 -ao user-pub.asc --export key_id
# export a private key to a file:
gpg2 -ao user-priv.asc --export-secret-keys key_id

================================================================================
espeak
================================================================================
# list avaialble voices:
espeak --voices

# write phonemes for French:
espeak -v fr-fr --ipa

================================================================================
ffmpeg / mencoder / video tools
================================================================================
# sampling − reduction of a continuous-time signal to a discrete-time signal
# audio sampling rate (af) is typically 48 kHz
# video frame rate (vf) is typically 25 Hz = 25 fps (frames per second)
# note that af >> vf

--------------------------------------------------------------------------------
# bitrate units:
--------------------------------------------------------------------------------
## kbps = kb/s = kbit/s = 1000 b/s = kilobit per second

## kBps = kB/s = 1000 B/s = 8000 b/s = kilobyte per second

## KiBps = KiB/s = 2¹⁰ B/s = 1024 B/s = 8192 b/s = kibibyte per second

## midentify outputs ID_VIDEO_BITRATE and (usually two) ID_AUDIO_BITRATE fields in bit/s (the first ID_AUDIO_BITRATE field is part of video stream, the second one refers to the proper audio stream)

## ffprobe outputs the audio bitrate in kbit/s and the total bitrate in bit/s calculated as (file size) / (stream duration), which is a rough estimate of the total video and audio bitrates

## tcprobe outputs the audio bitrate in kbit/s

# get the video/audio bitrate:
midentify in.avi
ffprobe -show_format -unit in.avi
tcprobe -i in.avi
--------------------------------------------------------------------------------

# get the number of frames in a video stream:
ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=nb_read_frames -of default=nokey=1:noprint_wrappers=1 in.avi

# show exact timestamps of video frames:
mpv --osd-fractions in.avi

--------------------------------------------------------------------------------
# ffmpeg
--------------------------------------------------------------------------------
## 0-based indices number input files (each specified with "-i" option) and streams, e.g. "2:3" is the fourth stream in the third input file

## options are applied to the next specified file (either input or output)

## "-codec:str" or "-c:str" selects encoder (before output) or decoder (before input), "str" selects stream
### "a:0" − the first audio
### "v" − video

## "-map fil:str | label" selects input stream "str" from a file "fil" or the one defined with "label", e.g.
ffmpeg -i a.avi -i b.avi -c copy -map 0:v -map 1:a:2 out.avi
## copies the video stream from "a.avi" and the third audio stream from "b.avi" into "out.avi"

## "-filter[:str] filtergraph" applies filtergraph to the "str" stream

## the exact frame range may be extracted from a video with the "trim" and "setpts" filters (so that the time of the first frame is zero), but note that:
ffmpeg -i in.mkv -vf trim=start_frame=1000:end_frame=1200,setpts=PTS-STARTPTS out.mkv
## trims only the video stream, the audio is untouched, therefore the output is a bizzarre clip with video stopping at the last frame and audio still on, so we need to either disable the audio stream:
ffmpeg -i in.mkv -vf trim=start_frame=1000:end_frame=1200,setpts=PTS-STARTPTS -an out.mkv
## or trim the audio stream accordingly, thus we need to compute the time range from frames [time = (frame_number - 1) / frame_rate)]:
ffmpeg -i in.mkv -vf trim=start_frame=1000:end_frame=1200,setpts=PTS-STARTPTS -af "atrim=start=39.96:end=47.96,asetpts=PTS-STARTPTS" out.mkv
## of course we can put the time range to both filters:
ffmpeg -i in.mkv -vf "trim=start=39.96:end=47.96,setpts=PTS-STARTPTS" -af "atrim=start=39.96:end=47.96,asetpts=PTS-STARTPTS" out.mkv

## note we double quote the filtergraphs containing dots (".") to prevent their shell expansion

## "-filter_complex filtergraph" applies complex filtergraph (one with arbitrary number of inputs and outputs), e.g.
ffmpeg -i video.mkv -i image.png -filter_complex "[0:v][1:v]overlay[out]" -map "[out]" out.mkv
## overlays an image ("1:v") over video ("0:v") − the are both inputs to the overlay filter, and there's only one output (labeled "[out]"), assuming there's only one video stream in input files, this is equivalent to
ffmpeg -i video.mkv -i image.png -filter_complex overlay out.mkv

## note that "-map [out]" (unquoted "[out]") would e.g. expand to "-map o" if there were a file "o" in the current directory, as "[...]" matches any one of the enclosed characters and within double quotes "[" and "]" lose their special meaning

## extract video segments between 10 s and 20 s and between 50 s and 60 s with the "concat" filter, mapping only the video stream (no audio):
ffmpeg -i in.avi -lavfi \
	"[0:v]trim=10:20,setpts=PTS-STARTPTS[v1]; \
	 [0:v]trim=50:60,setpts=PTS-STARTPTS[v2]; \
	 [v1][v2]concat[out]" \
	-map "[out]" out.mkv

## extract video segments between 10 s and 20 s, between 50 s and 60 s, and between 120 s and 130 s with the "concat" filter, mapping both video and audio streams (after adding more streams, adjust "n")
t1=10
t2=20
t3=50
t4=60
t5=120
t6=130
ffmpeg -i in.avi -lavfi \
	"[0:v]trim=$t1:$t2,setpts=PTS-STARTPTS[v1]; \
	 [0:a]atrim=$t1:$t2,asetpts=PTS-STARTPTS[a1]; \
	 [0:v]trim=$t3:$t4,setpts=PTS-STARTPTS[v2]; \
	 [0:a]atrim=$t3:$t4,asetpts=PTS-STARTPTS[a2]; \
	 [0:v]trim=$t5:$t6,setpts=PTS-STARTPTS[v2]; \
	 [0:a]atrim=$t5:$t6,asetpts=PTS-STARTPTS[a2]; \
	 [v1][a1][v2][a2][v3][a3]concat=n=3:v=1:a=1[outv][outa]" \
	-map "[outv]" -map "[outa]" out.mkv

## "-c:v" = "-vcodec", similarly for "-acodec"
## "-filter:v" = "-vf", similarly for "-af"
## "-lavfi" = "-filter_complex"

## delete the first 30 s from mp3 file:
ffmpeg -i in.mp3 -c:a copy -ss 30 out.mp3

## extract and scale a movie fragment between two frames into an animated GIF:
frame_start=1000
frame_end=2000
width=400
fops="trim=start_frame=$frame_start:end_frame=$frame_end,fps=15,scale=$width:-1:flags=lanczos"
ffmpeg -i in.avi -vf "$fops,palettegen" pal.png
ffmpeg -i in.avi -i pal.png -lavfi "$fops[x];[x][1:v]paletteuse" out.gif

## extract and scale a movie fragment and hardcopy subtitles into it:
seek_time=05:30
duration=60
subfile_in=in.srt
subfile_out=$(mktemp).${subfile_in##*.}
ffmpeg -i "$subfile_in" -ss "$seek_time" -t "$duration" "$subfile_out"
ffmpeg -ss "$seek_time" -t "$duration" -i in.avi -b:v 800k -vf "scale=600:-1,subtitles=$subfile_out:force_style='Fontsize=30'" out.avi
rm -f "$subfile_out"
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# mencoder
--------------------------------------------------------------------------------
## in case of A/V sync issues with mencoder, try adding "-mc 0 -noskip" option

## transcode the clip into avi format using:
### mpeg4 video codec with video bitrate of 800 kbps
### mp3 audio codec with audio bitrate of 128 kbps
mencoder -ovc lavc -lavcopts vcodec=mpeg4:vbitrate=800:autoaspect -oac mp3lame -lameopts abr:br=128 in.flv -o out.avi
## the same thing in ffmpeg:
ffmpeg -i in.flv -c:v mpeg4 -b:v 800k -c:a libmp3lame -b:a 128k out.avi
## in two above examples the parts "vcodec=mpeg4:" and "-vcodec mpeg4" can be skipped as they are default options

## transcode the clip into avi as above, and resize it to 800 × YYY pixels (maintaining aspect ratio):
mencoder -vf scale -zoom -xy 800 -ovc lavc -lavcopts vcodec=mpeg4:vbitrate=800:autoaspect -oac mp3lame -lameopts abr:br=128 in.flv -o out.avi

## extract a 2 min fragment from a film starting at 1:28:20 with transcoding:
mencoder -ovc lavc -lavcopts vcodec=mpeg4:vbitrate=800:vhq -oac mp3lame -lameopts abr:br=64 -ss 1:28:20 -endpos 2:00 in.avi -o out.avi

## extract a 2 min fragment from a film starting at 1:28:20, resize it maintaining the aspect ratio
## hardcopy the subtitles in cp-1250 encoding (strangely, you have to use -subcp iso-8859-1 for this)
## assure the subtitles take up 80 % screen width at most:
mencoder in.avi -o out.avi -mc 0 -noskip -ovc lavc -lavcopts vcodec=mpeg4:vbitrate=800:vhq -vf scale -zoom -xy 400 -oac copy -sub in.txt -subcp iso-8859-1 -subwidth 80 -ss 1:28:20 -endpos 2:00

## join videos with same resolution into one avi file (check input bitrates to choose a reasonable output value):
mencoder -ovc lavc -lavcopts vcodec=mpeg4:vbitrate=800:vhq -oac mp3lame -lameopts abr:br=64 file*.mp4 -o out.avi

## join videos with different resolutions into one avi file (check the input video resolutions to choose a reasonable output value):
mencoder -vf scale -zoom -xy 640 -ovc lavc -lavcopts vcodec=mpeg4:vbitrate=1800:mbd=2:autoaspect -oac mp3lame -lameopts abr:br=64 file1.mkv file2.mp4 -o out.avi

## extract a 1 min movie fragment starting from 1:00:00 into an animated GIF (the resulting GIF is worse in quality than ffmpeg-created one, see above):
mplayer -ss 1:00:00 -endpos 2:00 in.avi -vo gif89a:fps=15:output=out.gif

## one-liner DVD ripper: the DVD has been copied to a pendrive (/Volumes/KINGSTON) to Movie directory:
mencoder dvd:// -dvd-device /Volumes/KINGSTON/Movie -ovc lavc -lavcopts vcodec=mpeg4:vhq:vbitrate=1200:autoaspect=1 -vf scale -zoom -xy 640 -oac mp3lame -lameopts br=128 -o Movie.avi

## two-pass DVD ripper for better quality:

### get the crop values for the DVD which starts, say, at chapter 2 (but make sure you properly choose them − the parameters may be shown incorrectly when there is a dark background, so better choose a part of a film with a bright background so that the black rectangle stands out):
mplayer dvd://2 -vf cropdetect -ss 20:00

### use the output from the above command for the crop values (-vf crop=720:432:0:72 − from the previous command) and encode with English; make the 1st pass:
mencoder dvd://2 -alang en -ovc lavc -lavcopts vcodec=mpeg4:vhq:vbitrate=1200:autoaspect=1:vpass=1 -vf crop=720:432:0:72 -oac copy -o /dev/null

### finally, make the 2nd pass:
mencoder dvd://2 -alang en -ovc lavc -lavcopts vcodec=mpeg4:vhq:vbitrate=1200:autoaspect=1:vpass=2 -vf crop=720:432:0:72 -oac mp3lame -lameopts br=128 -o Film.avi

## extract the English subtitles from DVD:
mencoder dvd://2 -nosound -ovc frameno -o /dev/null -slang en -vobsubout Film

## compress the video with mencoder limiting the output file size to 700 MB:
mencoder in.avi -ovc xvid -xvidencopts bitrate=-700000 -oac mp3lame -o out.avi

## combine image files (of the same size!) into a single movie file with music background:
mencoder -audiofile "music.mp3" -ovc lavc -lavcopts vcodec=mpeg4 -oac copy "mf://*.jpg" -mf fps=0.3 -o output.avi
--------------------------------------------------------------------------------

================================================================================
external storage (phones etc.)
================================================================================
# Digital Camera Images (DCIM) − directory with pictures

# mount/unmount Android phone connected via an USB cable in the "~/my-phone" directory:
simple-mtpfs ~/my-phone
fusermount -u ~/my-phone

# mount DVD created under Mac OS X so that long file names are displayed properly:
sudo mount -o norock,map=o,utf8 /dev/cdrom /media/cdrom

================================================================================
files, directories, inodes and links
================================================================================
# a file is stored in at least three parts of a filesystem:
## inode (index node) − a data structure storing file metadata, but not its name
## data blocks − a data structure storing file contents
## directory − a list of hard links, i.e. (filename, inode number) pairs

# file metadata (thus information stored in an inode):
## file type (regular file, directory, etc.)
## location of data blocks the file uses on a filesystem
## owner and group
## permissions
## timestamps
## size
## number of links to the inode (link count)

# hard link is thus a pointer to an inode
# there can be multiple links pointing to an inode, thus a file can reside in more than one directory
# "file1" and "file2" are hard-linked if they point to the same inode
# all hard links to an inode are equivalent, regardless of their creation order
# a file has n hard links if the link count of its inode is n (thus we count the very file itself)
# inode numbers are unique within a filesystem, thus files can be hard-linked only within the same filesystem
# inode number for "/" (a root dir) is traditionally 2
# on my laptop, "/", "/home", "/opt" and "/scratch" all have inode numbers equal to 2, which is permitted since they are different filesystems

# a (filename, inode number) directory entry is unique only within that directory [there can be multiple identical (filename, inode number) pairs in different directories], but it can be resolved into system-wide unique (pathname, inode number) pair through a path resolution process
# (pathname, inode number) pairs are system-wide unique since pathnames are system-wide unique (there are no identical pathnames within a filesystem, and of course pathnames on different filesystems always differ), though inode numbers are not system-wide unique
# an inode can have several filenames (links), but each file's pathname points to one inode, thus there is a function mapping pathnames into inode numbers

# list full directory contents (filenames and inode numbers):
ls -il /scratch

------------------------------------------------------------
# a link count (lc) for a directory
------------------------------------------------------------
## starting value: lc = 0
## each directory:
### has one parent directory and is referenced as (dirname, inode number) in this parent (lc := lc + 1)
### always contains "." and ".." links (see "ls -all" output) and is called empty if it contains only them
## "." points to the directory itself, thus there is (., inode number) entry in each directory (lc := lc + 1)
## ".." points to the parent directory (increasing its link count by 1)
## each of n first-level subdirectories in a directory contains (.., inode number) entry (lc := lc + n)
## "." and ".." in the root directory ("/") both point to the root directory (the parent of the root directory is the root directory itself)
## finally, lc = n + 2, n − number of first-level subdirectories inside a directory
## directories are not allowed to be hard linked manually like files, since this might lead to traverse loops, if e.g. a directory pointed back to its grandparent
------------------------------------------------------------

# moving a file is very fast since its data are not moved, just:
## a new (filename, inode number) entry is created in a new directory
## an old (filename, inode number) entry is deleted in an old directory
# thus moving a file doesn't change anything in its inode nor data blocks (in particular, a number of links to its inode, so a number of its hard-linked files)
# when renaming a file to a filename corresponding to an existing file pathname, the latter file is overwritten (removed and replaced with the former file):
touch file{1,2}
mv -iv !$ # "file2" overwritten with "file1"

------------------------------------------------------------
# symbolic vs. hard links
------------------------------------------------------------
## symbolic link − a file with an absolute or relative path to a file (target) in the filesystem
## if a symbolic link's target doesn't exist, the link is broken/orphaned/dangling
## to dereference a symbolic link − to follow the reference to the target rather than work with the link itself
## to no-dereference a symbolic link − to work with the link itself
## symbolic link doesn't point to an inode and thus doesn't increase a link count of an inode
## symbolic links, contrary to hard links, can point to directories
## since inodes are unique within a filesystem, hard links must be on the same filesystem, but symbolic links can point to targets on different filesystems
## deleting a symbolic link doesn't influence its target
## a symbolic links breaks if:
### its target is deleted or moved
### it contains a relative path to a target and is moved
## the inode is removed and the corresponding data blocks (together with the disk space) are freed only when the inode's last filename (hard link) is removed (unlinked, with "rm" or "unlink" command)
## editing a file through its:
### symbolic link (e.g. via "vi symlink") never breaks the link
### hard link (e.g. via "emacs file") breaks the link if the program creates a working copy of a file which overwrites a file when the program terminates (it's not the case in vi)
## hard links are used by many backup codes (e.g. rsnapshot) to save the disk space
------------------------------------------------------------
## hard link:
------------------------------------------------------------
ln ~/text/a.txt b.txt    # ~/text/a.txt → inode ← b.txt
## no disk space growth
------------------------------------------------------------
## symbolic link:
------------------------------------------------------------
ln -s ~/text/a.txt b.txt # b.txt → ~/text/a.txt → inode
## no disk space growth
------------------------------------------------------------
## copying a file:
------------------------------------------------------------
cp a.txt b.txt           # a.txt → inode1, b.txt → inode2
## disk space grows
------------------------------------------------------------

# get total number of filenames pointing to inodes of all files in a current directory:
stat * | grep -i link

# find files referring to the same inode as the "a.txt" file (hard links):
find ~/ -samefile a.txt

# find regular files with multiple hard links:
find -type f -links +1

# get a full pathname to a file or resolve a symbolic link:
readlink -f a.txt
# or:
realpath a.txt

# extract a filename from a pathname:
basename ./Desktop/ # yields "Desktop"

# find duplicate files in a set of directories:
fdupes -r dir1 dir2

# find duplicate files in a set of directories, including hard links:
fdupes -rH dir1 dir2

# find files identical to "a.txt" in a directory "texts" and all duplicate files in it, including hard links:
rdfind -removeidentinode false a.txt texts
# the results are written to a "results.txt" file

# dry-run replacing duplicate files with hard links in a current directory:
rdfind -n true -makehardlinks true .
# the results are written to a "results.txt" file

================================================================================
filesystem structure
================================================================================
--------------------------------------------------------------------------------
# capitalization and spaces in filenames in Linux
--------------------------------------------------------------------------------
## some people say it's best practice to avoid capitals and spaces in filenames, because:

### Linux system files stick to that rule (e.g. "/etc/skel/.mozilla", "/usr/local/bin")
### sorting order in Unix is case-sensitive (e.g. "Makefile" starts with a capital letter so that it appears early in file lists)
### file transferability between other (i.e. lame) operating systems is easier
### specifying filenames with capitals and spaces on the command line is less comfortable

## but:

### most Linux distros create capitalized directories in "$HOME" (e.g. "$HOME/Documents", "$HOME/Pictures")
### BASH handles filenames with capitals and spaces well when properly scripted

## some people opt for camel case (e.g. "$HOME/myPictures")

## decision:

### avoid capitals and spaces in filenames for code, scripts, etc. (e.g. "$HOME/scripts/characters", "$HOME/codes/fortran/mpi/hello.F90") and do not keep them inside capitalized directories
### use capitals and spaces in filenames for articles, books, films, pictures, etc. according to the language rules (e.g. "$HOME/Desktop/Articles/Molecular Mechanics", "$HOME/Desktop/Varieties/Movies/Polish Films/Ziemia obiecana.mkv")
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# my take on filenames:
--------------------------------------------------------------------------------
## use "_" in system, code and script filenames to mark spaces (e.g. "build_scripts", "regular_users_list")
## use "-" to indicate software version (e.g. "openmpi-1.8.8", "molpro-2015", "molpro-pauli")
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# my take on build and installation directory names:
--------------------------------------------------------------------------------
## src_dir=$HOME/$name/$name-git (if from Git) or src_dir=$HOME/$name/$name-src-$ver (if downloaded directly) − directory to keep the source
## bld_dir=$src_dir/build-$suffix − directory to build a software from source
## inst_dir=$HOME/$name/$name-$suffix (locally) or inst_dir=/opt/$name/$name-$suffix (globally) − directory to install binaries and libraries
## jobs_dir=$HOME/$name/${name}_jobs − directory to keep input files
## scr_dir=/scratch/$USER/$name − scratch dirctory
## e.g. suffix=${branch//\//-}_${CC}-${CC_VERSION}_${FC}-${FC_VERSION}, name=nwchem, branch=release-6-8
--------------------------------------------------------------------------------

# get info on the filesystem hierarchy:
man hier

# list directory tree printing non-printable characters as is:
tree -dN

# go back to the previously visited directory:
cd -

================================================================================
file owner and group
================================================================================
# each file has one owner and is assigned to one group, in contrast to a user and a process which can be members of multiple groups
# a file owner doesn't have to be a member of a file group

# each file is owner:group and UID:GID, respectively

# change the files owner and group recursively inside a directory:
sudo chown -R theochem:gaussian dir

# change the files group recursively inside a directory:
chgrp -R gaussian dir

================================================================================
file permissions
================================================================================
# file permissions − access rights to specific users, groups of users and processes created by users that control their ability to operate on files

# of course, root is not bound by file permissions

# file permission classes:
## owner: used when the UID of the file equals the EUID of the calling process (e.g. the user accesses his own file) (A
## group: used when the GID of the file equals the EGID of the calling process or the GID of one of the supplementary groups of the calling process (e.g. the user accesses the file which he doesn't own but which belongs to one of his groups) (B)
## others: used when neither (A) nor (B) applies (e.g. the user accesses the file which he doesn't own and which belongs to none of his groups)

# chmod and most commands refer to the owner, group and others class with "u", "g" and "o" letters, respectively, and "a" means all three classes
# though most commands refer to the owner class as the user class, we prefer to use the former name since it avoids confusion with the current user which might not be the file owner

# display file owner, group and corresponding UID and GID, plus much more information:
stat file

# file mode − filesystem permissions given to owner, group and others class to access files, plus special permissions
# permissions for each class are represented by a bit triad b₃b₂b₁:
## b₁ − execute bit
## b₂ − write bit
## b₃ − read bit
# a bit is either 0 or 1, so the highest binary value of the triad is 111, which corresponds to:
## m = 1 * 2² + 1 * 2¹ + 1 * 2⁰ = 7
# octal numbers are used to represent the permissions:
## all numbers ≤ 7 have the same decimal and octal representations
## let's see how two bit triads convert to octal numbers:
### 111111 → 77
### 000111 → 7 ≡ 07
### 110110 → 66
## similarly for three bit triads:
### 111111111 → 777
### 100100100 → 444
## similarly for four, five, etc. bit triads
## so we can convert each bit triad separately into a decimal number and compose the resulting numbers into an octal number
## octal numbers are thus a natural choice to represent the bit triad values compactly
# execute bit: 001 ⇒ m = 1
# write bit: 010 ⇒ m = 2
# read bit: 100 ⇒ m = 4
# there are 2³ = 8 possible bit patterns for a single class, and hence 8³ = 512 possible bit patterns for the three classes
# class permissions can be represented by their octal value or symbolically with "r", "w", "x" and "-" symbols, e.g.
## m = 7 ⇔ rwx
## m = 5 ⇔ r-x
## m = 4 ⇔ r--

--------------------------------------------------------------------------------
# permissions for files:
--------------------------------------------------------------------------------
## r = read a file
## w = modify a file
## x = execute a file
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# permissions for directories (directory is basically a list of files and directories contained in it):
--------------------------------------------------------------------------------
## r = read the list (list the files within the directory)
## x = enter the directory and access files (but not list files)
## r+x = enter the directory, access and list files
## w+x = modify the list (create, delete, rename files), but not list files
## note that file deletion is allowed if a parent directory is w+x for the user, irrespective of the ownership and permissions of the file
--------------------------------------------------------------------------------

# typical directory permissions:
## 0 (---) − no access at all
## 1 (--x) − minimal access allowing directory traversing
## 5 (r-x) − enter the directory, read readable and edit writable files, but not remove any of them nor create new ones
## 7 (rwx) − full access

# permissions on Unix-like systems are not inherited, with the exception of the SGID bit (see below), however, to:
## enter a directory, it, together with all its parent directories, must have "x" set
## list files under a directory, (it must have "r" set for a single-level listing or "r" and "x" set for at least two-level listing) and all its parent directories must have "r" and "x" set

--------------------------------------------------------------------------------
# file and directory permission examples (user is the owner of all files)
--------------------------------------------------------------------------------
## the "x" bit on a directory:
--------------------------------------------------------------------------------
mkdir -m 775 dir
echo "text" > dir/file
chmod 111 dir
cd dir                  # works, "x" is set on "dir"
ls                      # doesn't work, "r" not set on "dir"
ls file                 # works, "x" on "dir" allows to access file contents together with its properties, and "ls file" accesses that information instead of reading directory contents as does "ls" − but we have to know the name of the file, completion doesn't work
cat file                # works as well
>file                   # interesting observation: we can erase file contents, since that operation doesn't modify directory contents
rm file                 # we can't remove any file without "w" set on its parent directory
--------------------------------------------------------------------------------
## the "r" bit on a directory:
--------------------------------------------------------------------------------
tree -pugFC
------------------------------------------------------------
output
------------------------------------------------------------
.
└── [drwxrwxr-x luke     luke    ]  dir/
    ├── [-rw-rw-r-- luke     luke    ]  file1
    ├── [-rw-rw-r-- luke     luke    ]  file2
    ├── [-rw-rw-r-- luke     luke    ]  file3
    └── [drwxrwxr-x luke     luke    ]  subdir/
        ├── [-rw-rw-r-- luke     luke    ]  file11
        ├── [-rw-rw-r-- luke     luke    ]  file12
        └── [-rw-rw-r-- luke     luke    ]  file13
------------------------------------------------------------
chmod 400 dir
find dir | sort
------------------------------------------------------------
output
------------------------------------------------------------
find: ‘dir/subdir’: Permission denied
dir
dir/file1
dir/file2
dir/file3
dir/subdir
------------------------------------------------------------
### we only get contents of "dir", since listing contents of "dir/subdir" would require "x" on "dir", we only have "r"
cd dir # doesn't work, "x" not set on "dir"
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# special permissions:
--------------------------------------------------------------------------------
## SUID bit and SGID bit for files (see above for the processes for explanation)
## SUID bit for directories is ignored by Linux
## SGID bit for directories means newly created files and directories under that directory inherit their group from that directory, and newly created subdirectories inherit the SGID bit
## sticky bit for files, used only in old operating systems, saves the program's text image on the swap device so it will load more quickly when run
## sticky bit for directories (restricted deletion flag) means only the directory owner can rename, move or delete files within that directory

## special permissions are, just like standard class permissions, represented by a bit triad b₃b₂b₁:
### b₁ − sticky bit: 001 ⇒ m = 1
### b₂ − SGID bit: 010 ⇒ m = 2
### b₃ − SUID bit: 100 ⇒ m = 4
--------------------------------------------------------------------------------

# a full file mode is uniquely defined by 4 * 3 = 12 bits, so there are 2¹² = 4096 possible file mode bit combinations
# listing all 12 bit values would be cumbersome, thus the mode is represented either:
## numerically by a 3-digit number (octal permission values for owner, group and others triads), e.g. 644, 755, etc.
## numerically by a 4-digit number (octal permission values for special permissions and for owner, group and others triads), e.g. 0644, 4755, etc.
## symbolically using a sequence of 9 characters from "r", "w", "x", "-" letters already explained above, and:
### "s" − "x" is set and SUID bit set when in the owner triad or SGID bit when in the group triad
### "S" − "x" is not set, otherwise same as "s" (rare on regular files, and useless on directories)
### "t" − "x" is set and sticky bit set, resides only in the others triad
### "T" − "x" is not set, otherwise same as "t" (rare on regular files, and useless on directories)
### "S" and "T" are useless on directories, since without "x" a user can't enter the directory
## e.g.
### 0644 ⇔ rw-r--r--
### 4755 ⇔ rwsr-xr-x
### 2720 ⇔ -rwx-wS---
### 1640 ⇔ rw-r----T

# show file mode in an octal form:
stat -c %a file

# show file mode in a symbolical (human-readable) form:
stat -c %A file
# or:
ls -l file
# or:
ls -ld dir
# note that the mode is prepended with the file type character ("-" − regular file, "d" − directory, etc.) and if it's appended with "+", the file has extended permissions (access control lists)

--------------------------------------------------------------------------------
# file mode creation mask:
--------------------------------------------------------------------------------
## contains the permission bits that should not be set on a newly created file
## is the logical complement of the:
### (default mode + 0111) for newly created files
### default mode for newly created directories
## ignores the special permission bits

## default creation mode:
### 0777 for directories
### 0666 for regular files (Linux does not allow files to be created with executable permissions)
## hence for the mask = 0002, the mode of a newly created:
### regular file is 0664
### directory is 0775 or 2775 if it's under a SGID-set directory

## display the file mode mask:
umask
--------------------------------------------------------------------------------

# changing file modes:
umask          # 0002
touch file     # 0664
chmod +x file  # 0775
chmod +s file  # 6775
chmod 664 file # 0664 (omitted digits are assumed to be leading zeros)
chmod o-r file # 0660
mkdir dir      # 0775
chmod +t dir   # 1775
chmod 775 dir  # 0775
chmod g+s dir  # 2775
chmod 775 dir  # 2775 (SUID and SGID bits of a directory cannot be cleared with a numeric mode)
chmod -s dir   # 0775 (SUID and SGID bits of a directory need to cleared with a symbolic mode)

--------------------------------------------------------------------------------
# share "/var/www" directory between users of the "www-data" group so that they can read and write contents in it:
--------------------------------------------------------------------------------
## let's assume that "/var" and "/var/www" are root:root and 0755, so are readable by everyone
## recursively change group of "/var/www" to "www-data":
sudo chgrp -R www-data /var/www
## recursively grant group members a write permission to "/var/www":
sudo chmod -R g+w /var/www
## add the SGID bit to "/var/www" directory and all directories below it, so that newly created files and directories created under it belong to the "www-data" group:
sudo find /var/www -type d -exec chmod g+s {} \;
## we can't simply use "chmod -R" above, since we must restrict the operation to directories only, and we apply it recursively because the SGID bit is inherited only after it's been added
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# external disk with ext4 filesystem mounted in "/run/media/luke/DataTraveler" for the "luke" user:
--------------------------------------------------------------------------------
## "/run/media/luke/DataTraveler" is root:root 0755, so "luke" can't create files in that directory
## "luke" needs to use sudo to create a directory:
sudo mkdir dir
sudo chown luke:luke
## thus created "dir" is usually 0755, since root's mask is usually 0022, and that of a regular user is usually 0002, so "luke" might additionally do
chmod 775 dir
## "dir" is now fully accessible to "luke"
## note that if an external disk with FAT filesystem is mounted, a regular user can create files directly under a mount point since FAT is totally lame and doesn't know what Linux permissions are
--------------------------------------------------------------------------------

================================================================================
file timestamps
================================================================================
# file MAC (modification, access, change) times:
## M (mtime) describes when the file contents most recently changed
## A (atime) describes when the file was most recently opened for reading
## C (ctime) describes when the file owner, group, permissions, size or name most recently changed
## mtime changes each time a file is written during edition, even if its final version is the same as that of the originally-opened file
## mtime change triggers atime and ctime changes: atime is set to mtime, and ctime is ca. 50 ms later in time than mtime since file metadata are written after its contents were saved
## renaming a file changes only its ctime
## note, however, that since most filesystems are mounted with the default "relatime" option, atime is only updated if the previous atime was earlier than the current mtime or ctime

# report file timestamps:
stat file

# when e.g. wget or youtube-dl downloads a file from a website, its mtime is taken from a download server if it gives timestamps, but atime and ctime are set to the download time since the file copy has been created locally, so to list files downloaded within last hour inside a directory, use:
find -maxdepth 1 -amin -60
# or:
find -maxdepth 1 -cmin -60
# instead of the "-mmin" switch

================================================================================
file and directory size
================================================================================
# list 15 biggest directories under a current directory:
du -hS | sort -hr | head -n 15
# note that "du -hS" treats each directory separately and doesn't count the size of its subdirectories (each directory is printed separately), hidden directories are accounted for

# list 15 biggest directories in a current directory including the size of their subdirectories:
shopt -s dotglob
du -hs * | sort -hr | head -n 15
# note that the "dotglob" option must be set so that a shell expands "*" into hidden directories, if present, as well

================================================================================
file renaming
================================================================================
# use brace expansion to avoid first argument repetition:
mv -iv {,old_}readme.txt             # 'readme.txt' -> 'old_readme.txt'
mv -iv {Image0001,"My Passport"}.jpg # 'Image0001.jpg' -> 'My Passport.jpg'
mv -iv file{,.backup}                # 'file' -> 'file.backup'

# use history expansion to avoid first argument repetition:
mv -iv Image0001.jpg "My Passport"!#:2:e # 'Image0001.jpg' -> 'My Passport.jpg' ("2" means second word after "mv", which is "Image0001.jpg")
mv -iv "system file" !#$.backup          # 'system file' -> 'system file.backup'
# the filename can be printed using the "p" designator for further edition:
mv -iv "file with a long name" !#$:p
# then press "↑" to edit the command

--------------------------------------------------------------------------------
# renaming multiple files: rename and mmv
--------------------------------------------------------------------------------
## rename "linx1.txt" etc. files into "linux docs 1.txt" etc.:
rename linx "linux docs " *.txt
## note we cannot quote "*.txt" as the rename command needs a list of files, and quoting would prevent the shell expansion into a list of files

## mmv command works with globs and the globs must be quoted as they must be processed by mmv, not by the shell

## dry-run a multiple rename operation with mmv:
mmv -n "*.jpg" "#1.png"

## append "p" to filenames starting with a digit:
mmv -v "[0-9]*" "p#1#2"
## "#1" matches a first digit in a filename, "#2" matches everything after the first digit

## rename files and directories with names beginning with two numbers and "_" into the remainders of their names:
mmv -rv "[0-9][0-9]_*" "#3"
## "#1" and "#2" would match first and second digit in a filename, respectively
## "-r" must be used to match both files and directories

## remove " (sth)" from filenames:
mmv -n '* (*)*' '#1#3'

## remove "Ford Fiesta - " leading string from all filenames und capitalize first character after the string:
mmv -v "Ford Fiesta - ?*" "#u1#2"
## e.g. "Ford Fiesta - rear.jpg" is renamed into "Rear.jpg"
--------------------------------------------------------------------------------

================================================================================
temporary files and directories
================================================================================
# create a temporary directory in a current directory using a template:
mktemp -p . -d mytempdir-XXX

================================================================================
find / locate
================================================================================
# note that unless specified otherwise, "files" are used in Unix sense (regular files, directories, links, etc.)

# case-insensitively search for files containing "finance" in their name:
locate -i finance

# case-insensitively search for files containing "1zł", "5zł", etc. in their name:
locate -i "*[0-9]zł*"

--------------------------------------------------------------------------------
# permissions with find
--------------------------------------------------------------------------------
## file permissions: n₁n₂n₃

## "-perm m₁m₂m₃":     n₁ = m₁ ∧ n₂ = m₂ ∧ n₃ = m₃
## "\! -perm m₁m₂m₃":  n₁ ≠ m₁ ∨ n₂ ≠ m₂ ∨ n₃ ≠ m₃

## "-perm -m₁m₂m₃":    n₁ ≥ m₁ ∧ n₂ ≥ m₂ ∧ n₃ ≥ m₃
## "\! -perm -m₁m₂m₃": n₁ < m₁ ∨ n₂ < m₂ ∨ n₃ < m₃

## "-perm /m₁m₂m₃":    n₁ ≥ m₁ ∨ n₂ ≥ m₂ ∨ n₃ ≥ m₃
## "\! -perm /m₁m₂m₃": n₁ < m₁ ∧ n₂ < m₂ ∧ n₃ < m₃

## list files which have exactly 664 permissions:
find -perm 664

## list files which have 664 permissions and possibly other extra permission bits set (so e.g. file with 777 permissions is matched, but 770 is not):
find -perm -664

## list files which are writable by somebody (owner, group or others):
find -perm /222

## list files at least readable by others (any n₁ and any n₂ and n₃ ≥ 4, thus n₁ ≥ 0 ∧ n₂ ≥ 0 ∧ n₃ ≥ 4):
find -perm -004
## now list files not readable by others [n₃ < 4, note that this corresponds to (n₁ < 0 ∨ n₂ < 0 ∨ n₃ < 4) == (0 ∨ 0 ∨ n₃ < 4) == (n₃ < 4) since both n₁ and n₂ are never negative]:
find \! -perm -004

## list files with special permissions, i.e. SUID, SGID or sticky bit set:
find -perm /7000

## list files which have SUID or SGID bit set:
find -perm /6000
--------------------------------------------------------------------------------

# list files from oldest to newest by modification time:
find -printf "%T@ %p\n" | sort -n

--------------------------------------------------------------------------------
# to skip certain directories when searching with "find", use "-path" and "-prune":
--------------------------------------------------------------------------------
## list all the files in the "/proc" directory except for those in the directories directly under "/proc" whose names start with numbers:
find /proc -path "/proc/[0-9]*" -prune -o -print

## list all the files in the "src" directory whose names begin with "a", except for those under "src/.svn" dir:
find src -path "src/.svn" -prune -o -iname "a*"
## or:
find src -path "src/.svn" -prune -o -iname "a*" -print
## note that by default, the "find" command prints all the files matching the criteria, however, with the "-print" option it prints files only on explicit print instructions, so if "src/.svn" directory exists:
### the first command above prints "src/.svn" directory (for which "-prune" returns true, but makes find never descend into that directory)
### the second command above doesn't print "src/.svn" directory since "-print" is associated with the right-hand side of the OR condition ("-o"), and hence nothing is printed from the left-hand side of the condition

## list files only in a current directory:
find \! -name . -prune
## or:
find -maxdepth 1 \! -iname .
## note that the the above commands don't print "." since it was excluded with "\! -name .", the directories are not descended into owing to "-prune"
--------------------------------------------------------------------------------

# list all the files except those with some extensions (note that in BASH scripts it's better to use "!(pattern-list)", see the BASH section):
find \! -iregex ".*\.\(bmp\|jp.*g\|gif\|png\)$"

# find directories with leading whitespace in their name:
find -type d -regex "./\s.*"

# find directories with trailing whitespace in their name:
find -type d -regex "./.*\s$"

# use "echo" to dry-run a dangerous operation, e.g. moving files:
find -iname "*.txt" -exec echo mv -iv '{}' dest \;

================================================================================
grep
================================================================================
# case-insensitively search for files with the "mod.*ule" pattern within directories ending with "jobs" in the current directory and their subdirectories, omitting binary files:
grep -irI "mod.*ule" *jobs

================================================================================
gnuplot
================================================================================
# note on the conditional plotting:
plot "data.txt" u 1:($4 < 0 ? 1 / 0 : ($2 + $3) / 2) w lp
## rows evaluating to "1 / 0" (an undefined and hence not plottable value) are not connected with lines, so such rows cause breaks in a graph if they are surrounded by the rows evaluating to defined values
## so to plot "file.dat" using only rows with the same first and second value with points only (not the lines) you can safely use:
(...)
inp_file = "data.txt"
plot inp_file u 1:($1 == $2 ? $8 : 1 / 0) w p ls 1
## however, the command:
plot inp_file u 1:($1 == $2 ? $8 : 1 / 0) w lp ls 1
## won't connect all the points with lines as it skips rows evaluating to "1 / 0"
## to connect all the points with lines, use external command, e.g. awk, to preprocess the data file:
plot "<awk '{if ($1 == $2) print $1, $8}' " . inp_file w lp ls 1
## to facilitate multiple usage of the external command, use a macro:
data = "\"<awk '{if ($1 == $2) print $1, $8}' \" . inp_file"
stats @data nooutput
plot @data w lp ls 1

# plot a section through a graph z = f(x, y) for say y = y0 with points only:
(...)
y0 = 1.0
plot "file_xyz.dat" u 1:($2 == y0 ? $3 : 1 / 0) notitle w p ls 1

# plot "file.dat" using only rows beginning with "print-me" with points only:
(...)
plot "file.dat" u (stringcolumn(1) eq "print-me" ? $3 : 1 / 0):xticlabel(2) notitle w p ls 1

# define a complex string function:
lambda_info(lambda1, lambda2) = \
	(rlambda = lambda1 / lambda2, rlambda == 1 ? \
		info = " = " : \
		info = sprintf(" = %.2f", rlambda), \
	"{/Symbol-Oblique l}_2".info."{/Symbol-Oblique l}_1")

# scale plots generated with "multiplot layout" (default size for eps is 5 × 3.5 in):
(...)
width_def = 5 # in
height_def = 3.5 # in
scale = 1.2
set terminal postscript eps enhanced colour size scale * width_def, scale * height_def fontscale 1.2
(...)
set output "wiek_termometry.eps"
set multiplot title "plots" layout 3, 2
(...)

# change font size of axis tics:
set tics font ", 10"

# make a statistical summary of the data file (minimum, maximum values, etc.):
stats "data.txt" u 1:2 name "STATS_data"
# then you can use "STATS_data_max_x" etc.

# generate x-axis tick labels from x-column:
plot "data.dat" u 0:2:3:xtic(1) w boxerrorbars
# "0" = "column(0)" is a sequential order of each point within a data set and needs to be given when x-coordinate is required as in the case of "boxerrorbars"
# "xtic(1)" uses column 1 contents as x-axis tick labels

# pass arguments to a gnuplot script:
gnuplot -c plots.plt 1.2 file
# in "plots.plt", "1.2" and "file" are referred to as "ARG1" and "ARG2", respectively:
(...)
ratio = ARG1
out_file = ARG2
(...)

# place values on top of bars in a histogram:
-------------------------------------------------------
data.dat
-------------------------------------------------------
# x	y1	y2	y3	y4	y5
a	3	5	2	6	7
b	4	3	8	2	3
-------------------------------------------------------
plots.plt
-------------------------------------------------------
#!/usr/bin/gnuplot

inp_file = "data.dat"
out_file = "data.eps"

set terminal postscript eps enhanced colour fontscale 1.5
set output out_file
set style data histograms
set style histogram cluster
set style fill solid 1.0 border lt -1
set yrange [0:10]
col_first = 2
col_last = 5
nboxes = col_last - col_first + 1
gap_size = 2
box_width = 1.0 / (gap_size + nboxes)
xcenter(x0, icol) = x0 - ((nboxes + 1.0) / 2.0 - icol) * box_width
plot \
	for [col = col_first:col_last] \
		inp_file u col:xtic(1) notitle, \
	for [col = col_first:col_last] \
		inp_file u (xcenter($0, col - 1)):col:(sprintf("%.1f", column(col))) notitle \
		w labels center rotate by 45 font ", 10" offset 1, 0.8
------------------------------------------------------------
# "style data histograms" sets plotting style to histograms [as if "plot (...) with histograms" were used]
# "set style histogram cluster" sets the look style of a histogram
# label coordinates are given as "x:y:label":
## x-coordinate is computed with "xcenter" function returning the center of a box
### "$0" is x-coordinate of a center of a cluster group in a histogram, equal to the consecutive row number in a data file
### the clusters [each with n boxes (bars)] are centred at integer x values, starting with x = 1
### gap size is in box (bar) width units
### x-distance between two cluster groups is 1 = (n / 2 + gap_size + n / 2) * box_width ⇒ box_width = 1 / (gap_size + n)
## y-coordinate is taken from a column
## label is the y-coordinate printed with the "%.1f" format
# note that for functions to operate on column values, "column(col)" must be used, "col" is just a column number
# note that "for" must be used for each plot-element as iteration is a part of a plot-element

================================================================================
images tags (metadata)
================================================================================
# tag (metadata) − keyword or term assigned to a piece of information such as a file
# metadata standards:
## EXIF − exchangeable image file format
## IPTC − information interchange model (part of International Press Telecommunications Council, being replaced with XPM)
## XPM − extensible metadata platform (part of Adobe, the newest standard)
## the tag names between metadata standards overlap a lot, e.g. most of them contain the "City" tag
## list-type tags can contain many values
## keywords can be stored in "IPTC:Keywords" and "XMP:Subject" list-type tags

--------------------------------------------------------------------------------
# exiftool
--------------------------------------------------------------------------------
## exiftool reads and writes metadata in a variety of file types, but doesn't alter the images

## get info on tag names:
man Image::ExifTool::TagNames

## print tag names and values contained in a file:
exiftool -s image.jpg

## list tag names, including duplicates and unknowns, matching a specific pattern, together with their values:
exiftool -a -u -s image.jpg | grep -i date
## or:
exiftool -a -u -s "-*date*" image.jpg
## note that arguments containing wildcards must be quoted to prevent shell globbing

## display the value of the "Orientation" tag:
exiftool -Orientation image.jpg

## display the "Orientation" tag's numerical value:
exiftool -n -Orientation image.jpg

## set the "Orientation" tag to 6 (right-top) preserving file modification time:
exiftool -P -n -Orientation=6 image.jpg

## set the "DateTimeOriginal", "CreateDate" and "ModifyDate" tags to the current time:
exiftool -AllDates=now image.jpg

## add a keyword "My Family" to the current list of keywords in the IPTC group (IPTC is preferred by exiftool):
exiftool -iptc:Keywords+="My Family" image.jpg
## or:
exiftool -Keywords+="My Family" image.jpg

## add a keyword "My Family" to the current list of keywords in the XPM group ("Subject" tag is only present in the XPM group):
exiftool -xmp:Subject+="My Family" image.jpg
## or:
exiftool -Subject+="My Family" image.jpg

## delete a tag:
exiftool -DateTime= image.jpg

## erase all meta information from the "dst.jpg" file, then copy tags from the "src.jpg" file:
exiftool -All= -tagsFromFile src.jpg dst.jpg

## copy specific tag values from the "src.jpg" file:
exiftool -m -tagsFromFile src.jpg "-*date*" dst.jpg

## copy all but specific tag values from the "src.jpg" file:
exiftool -m -tagsFromFile src.jpg "--*date*" dst.jpg

## if there are duplicate tag names, e.g. "DateTime", duplicate instances can be removed by:
exiftool -DateTime= image.jpg
## and then the tag value may be copied from another tag, e.g. from the "CreateDate" tag:
exiftool "-DateTime<CreateDate" image.jpg
## if there are problems deleting some tags, try deleting all XMP tags not writable by exiftool:
exiftool -xmp:All= -tagsFromFile @ "-All:All<xmp:All" image.jpg
## "-tagsfromfile @" refers to the "image.jpg" file
## if it doesn't help, change "-xmp:All=" into "-All="

## list specified meta information for all files in a current directory recursively in a tabular form:
exiftool -r -T -directory -filename -createdate -aperture -shutterspeed -iso .

## list specified meta information for all files in a current directory recursively using formatted output:
exiftool -r -p '$directory/$filename $createdate $filecreatedate' -d "%Y-%m-%d %H:%M:%S" -q -q -f .
## note that single, not double, quotes must be used with "-p" option, otherwise shell will expand "$directory" etc., in most cases to null strings, and you'll get rubbish results

## move all files in "dir" into a directory hierarchy based on year, month and day of "DateTimeOriginal" tag:
exiftool "-Directory<DateTimeOriginal" -d %Y/%m/%d dir
--------------------------------------------------------------------------------

# autorotate pictures based on the EXIF data:
jhead -ft -autorot ./*.jpg

================================================================================
LaTeX: TeX Live configuration and compilation
================================================================================
# get the local TeX Live home directory (usually "~/texmf"):
kpsewhich -var-value=TEXMFHOME

# make LaTeX definitions visible to TeX Live: put your definitions in the above-obtained "$TEXMFHOME" followed by root TeX Live directory structure, which you get through e.g.
kpsewhich braket.sty
# usually it's "~/texmf/tex/latex", then you can check if TeX Live sees a given file:
kpsewhich my_definitions.sty

# open the "longtable" package manual:
texdoc longtable

# list package manuals matching a string:
texdoc -s babel

# open the comprehensive LaTeX symbol list:
texdoc symbols-a4

# useful "Makefile" to compile a LaTeX document into PDF with the SyncTeX reverse search:
-------------------------------------------------------
Makefile
-------------------------------------------------------
name := manuscript
target := $(name).pdf

all : $(target)

pdf : $(target)

%.pdf : %.tex
	latexmk -pdflatex="pdflatex -synctex=1 -interaction=nonstopmode" -pdf $*

.PHONY : clean

clean :
	rm -f ./*{aux,bbl,bcf,blg,fdb*,fls*,log,Notes.bib,synctex.gz,toc,out,xml} $(target)
-------------------------------------------------------

================================================================================
LaTeX: typesetting
================================================================================
# input accented characters directly through Unicode UTF-8:
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}

# prevent hyphenation when:
## no "babel" package is used:
\usepackage[none]{hyphenat}
## "babel" package is used:
\hyphenpenalty = 10000

# don't print page numbers:
\pagenumbering{gobble}

# print the value of a "example "counter:
\theexample

# insert references from another file:
-------------------------------------------------------
(...)
\usepackage{xr-hyper}
\usepackage[colorlinks = true, linkcolor = blue, citecolor = blue, urlcolor = blue, bookmarks = true]{hyperref}
\externaldocument[manuscript-]{main_file}
(...)
See Fig.~\ref{manuscript-fig_label_in_main_file} for details.
(...)
-------------------------------------------------------

# switch between languages (main language is given as the last option):
-------------------------------------------------------
\documentclass{article}

\usepackage[utf8]{inputenc}
\usepackage[german, polish]{babel}

\begin{document}

	\begin{otherlanguage}{german}
		Deutsch
	\end{otherlanguage}

		Polski

	\foreignlanguage{german}{Deutsch}

\end{document}
-------------------------------------------------------

# a letter in German with date in a German format, with hyphenation turned off and a font size of 20 pt:
-------------------------------------------------------
\documentclass[20pt]{extletter}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage[german]{babel}
\usepackage[useregional]{datetime2}

\hyphenpenalty = 10000

\address{Essen,}
\date{den~\DTMdisplaydate{2017}{08}{05}{}}
\signature{Lük Anonymus}

\begin{document}

\begin{letter}{Frau Müller \\ Düsseldorf}

\opening{Sehr geehrte Frau Müller,}

Halo, etc.

\closing{MfG,}

\end{letter}

\end{document}
-------------------------------------------------------

# avoid "Command `\lll` already defined" error with "babel" and "amssymb" packages:
\let\lll\undefined
\usepackage{amssymb}
# or load the "amssymb" before the "babel" package

# set all margins:
\usepackage[margin = 2cm]{geometry}

--------------------------------------------------------------------------------
# bibliography with Biblatex
--------------------------------------------------------------------------------
## add compressed-numerical style bibliography with Biblatex and reference a bibliography section:
-------------------------------------------------------
(...)
\usepackage{nameref}
\usepackage[citestyle = numeric-comp, maxnames = 10, sorting = none]{biblatex}
\addbibresource{bibliography.bib}
(...)
See the~\nameref{biblio} section.
(...)
\printbibliography[title = Publications\label{biblio}]
(...)
-------------------------------------------------------

## don't print "note" nor "doi" fields for all references and "title" field for specific references with Biblatex:
-------------------------------------------------------
(...)
\usepackage[maxnames = 4]{biblatex}
\addbibresource{bibliography.bib}
\AtEveryCitekey{\clearfield{note}}
\AtEveryCitekey{\clearfield{doi}}
% full cite without a title
\newcommand{\fullcnt}[1]{\AtNextCitekey{\clearfield{title}}\fullcite{#1}}
(...)
The title of the thesis was~\citetitle{my_thesis}. The article is~\fullcnt{my_article}.
(...)
-------------------------------------------------------
--------------------------------------------------------------------------------

# useful packages:
## booktabs (rules in tables)
## chemfig (molecules, reaction schemes)
## datetime2 (times and dates)
## extsizes (global font size setting)
## mhchem (chemical reactions)
## siunitx (SI units, tables with numbers)
## subcaption (subfigures, subtables)
## tcolorbox (frames)

================================================================================
LaTeX: presentations (Beamer)
================================================================================
--------------------------------------------------------------------------------
# in Beamer, overlays are controlled by the value of "beamerpauses" counter (you can check its value by "\thebeamerpauses" command):
--------------------------------------------------------------------------------
## each "+" in overlay specification (e.g. "<+-+(2)>") is replaced by the value of the "beamerpauses" counter, which is 1 at the beginning of the frame, and after setting a given text, "beamerpauses" is increased by 1, so all "+" signs in an overlay specification are replaced with the same number

## use the following to avoid clashes with "onslide" and "uncover":
-------------------------------------------------------
(...)
\begin{frame}
	beamerpauses = 1
	\begin{overprint}
		\onslide<+-+(2)> % = <1-3>
			beamerpauses = 2
			\uncover<+->{ % = <2->
				beamerpauses = 3
			}
			\uncover<+->{ % = <3->`
				beamerpauses = 4
				text
			}
		\onslide<+> % = <4>
				beamerpauses = 5
	\end{overprint}
\begin{frame}
-------------------------------------------------------

## each "." in overlay specification (e.g. "<.(1)-.(4)>") is replaced by the value of "beamerpauses" counter minus one, and "beamerpauses" is not changed

## "\begin{frame}[<+->]" means that the "<+->" overlay specification is applied to all commands accepting overlay specifications that are not followed by their own overlay specifications

## use "onlyenv" environment with "itemize" environment if you want to further use commands with "+" overlay specifications as the "beamerpauses" counter is reset to its original value after "\only" (note that "5" is used with "onlyenv" since there are four items plus one block title influenced by "<+->" specification):
-------------------------------------------------------
(...)
\begin{frame}[<+->]
	\begin{onlyenv}<.(1)-.(5)>
		\begin{block}{Fruits}
			\begin{itemize}
				\item Orange.
				\item Apple.
				\item Strawberry.
				\item Banana.
			\end{itemize}
		\end{block}
	\end{onlyenv}
	\only<+>{
		\begin{center}
			\Large Fruits \\
			\includegraphics[width = \textwidth]{Fruits}
		\end{center}
	}
-------------------------------------------------------
--------------------------------------------------------------------------------

# insert a figure into another figure:
-------------------------------------------------------
(...)
\usepackage{textpos}
(...)
\begin{frame}
	\frametitle{Example: interaction energies for the \ce{H2O} dimer}
	\begin{center}
		\includegraphics[scale = 0.8]{Graphs/Water_dimer/en_int_water_dimer}
	\end{center}
	\begin{textblock}{4}(10, 4)
		\includegraphics[scale = 0.08]{Figures/H2O_dimer}
	\end{textblock}
\end{frame}
(...)
-------------------------------------------------------

================================================================================
logs with systemd
================================================================================
# view most recent system logs in a live mode:
journalctl -f

# view system logs since last boot in reverse order:
journalctl -b -r

# view system logs since last boot for chronyd service:
journalctl -b _SYSTEMD_UNIT=chronyd.service

# view most recent system logs for Kontact and Akonadi:
journalctl -n /usr/bin/kontact /usr/bin/akonadi*
# use "-n 50" to see 50 most recent messages, default is 10

================================================================================
MacPorts
================================================================================
# free some disk space:
sudo port uninstall inactive
sudo port clean --all inactive
sudo port clean --all installed

================================================================================
make
================================================================================
# avoid using "-j" option with non-compiling targets ("install" is usually such a target): instead of
make -j all install
# use
make -j all
make install

================================================================================
Maxima
================================================================================
# print a number using scientific notation:
printf(false, "~e", alpha);

================================================================================
MolMol
================================================================================
# measure distances and bond angles in MolMol:
type "DialMeasure on" in command line and select two or three atoms (first with mouse, others with <SHIFT> + mouse)

================================================================================
network
================================================================================
--------------------------------------------------------------------------------
# basic networking terms:
--------------------------------------------------------------------------------
## communication protocol − a set of rules allowing two or more parts of a communications system to transmit information via some physical quantity
## internet protocol (IP), transmission control protocol (TCP) − principal communication protocols for relaying data across network
## TCP/IP = Department of Defense (DoD) model − a complete Internet protocol suite specifying how data should be packetized, addressed, transmitted, routed and received
## IP address − a numerical label assigned to each device connected to a computer network that uses the IP for communication
## packet − the unit of data routed between an origin and a destination on the network
### TCP layer of the TCP/IP divides data sent over the network (emails, files, etc.) into chunks (packets) of an efficient size for routing
### each packet is numbered and includes the IP address of the origin and the destination
### upon arriving at their destination, packets are reassembled into the original file by the destination's TCP layer
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# useful wireless networking terms:
--------------------------------------------------------------------------------
## WiFi − a technology for wireless networking
## wireless local area network (WLAN) − a wireless computer network connecting two or more devices using a WiFi
## 802.11 − a set of specifications for implementing WLAN computer communication, e.g. it introduces 14 channels differing in radio frequency
## wireless access point (AP, WAP) − a device allowing a WiFi-equipped device to connect to a wired network, it can either connect to a router or be a part of a router
## wireless network interface controller/adapter (WNIC) − a network interface controller which connects to WLAN
## hotspot − a physical location where people may obtain Internet access using WiFi via WLAN
## media access control address (MAC address) − a unique identifier assigned to network interfaces
## basic service set (BSS) − a single AP together with all associated stations
## BSS identifier (BSSID) − a unique identifier of a BSS, usually its MAC address
## service set identifier (SSID) − a WLAN identifier which serves as a login when connecting to AP, it's the informal (human) name of the service set
## extended service set (ESS) − a set of two or more interconnected wireless BSSs that share the same SSID (ESSID in this context)
## so you go to a hotspot where you connect to an access point using WiFi:
### WiFi = the how
### access point = the what
### hotspot = the where
## signal strength in decibel-milliwatts:
### s / dBm = 10 log(P / P₀), P₀ = 1 mW, so for P < P₀, s < 0
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# WLAN configurations (topologies):
--------------------------------------------------------------------------------
## wireless ad hoc network (WANET, peer-to-peer network) − data is transferred to and from wireless network adapters connected to PCs and other devices such as printers, so the devices communicate directly, not through a router
## infrastructure mode network − devices on the network communicate through an access point (usually a router), so they rely on a pre-existing infrastructure, for this configuration BSSID = MAC address
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# WiFi security:
--------------------------------------------------------------------------------
## pre-shared key (PSK) − a shared secret previously shared between the two parties before it needs to be used for authentication
## temporal key integrity protocol (TKIP) − a security protocol used in the 802.11 WiFi standard
## initialization vector (IV) − a fixed-size input to a cryptographic primitive
## wired equivalent privacy (WEP) provides data confidentiality comparable to that of a traditional wired network
## WiFi protected access (WPA) uses TKIP
## WiFi protected access II (WPA2) usually uses PSK
## WiFi protected setup (WPS) allows you to connect to a protected WLAN by usually pressing a WPS button on a router and then, within 2 minutes, pressing a similar button on a client, say, a printer (push button method) or additionally entering a PIN code generated by the router (PIN method), so you don't need to type the network credentials
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
# cracking the WiFi:
--------------------------------------------------------------------------------
## get the name of the WNIC:
iwconfig
## e.g. we get "wlp11s0"

## switch WNIC into the monitor mode:
sudo airmon-ng start wlp11s0
## iwconfig now prints "wlp11s0mon" instead of "wlp11s0"

## display all the APs and clients together with their MAC addresses within the range of WNIC:
sudo airodump-ng wlp11s0mon
## note that "<length: n>" in the SSID field means that the SSID is hidden and its length is n
## if n = 0 or n = 1, an AP does not reveal the actual length and the real length could be any value
## airodump-ng will capture a hidden SSID when a client associates with an AP

## to crack WPA/WPA2-protected networks, the authentication handshake (performed when a client connects to an AP) must be captured, which can be done:
### actively − you accelerate the process by deauthenticating an existing wireless client (your WNIC needs an injection capability)
### passively − you wait for a client to authenticate to the network

## capture the WPA authentication handshakes and IVs for the AP with "00:14:6C:7E:40:80" MAC address operating on channel 9 and write the results to "psk*" files:
sudo airodump-ng -c 9 --bssid 00:14:6C:7E:40:80 -w psk wlp11s0mon

## if no handshake is being captured for a long time, open a new terminal tab and deauthenticate the wireless client with "00:0F:B5:FD:FB:C2" MAC address from the AP with "00:14:6C:7E:40:80" MAC address:
sudo aireplay-ng -0 1 -a 00:14:6C:7E:40:80 -c 00:0F:B5:FD:FB:C2 wlp11s0mon

## open a new terminal tab and crack the PSK using previously created "psk*.cap" files and "/usr/share/doc/aircrack-ng/password.lst" and "big_list.txt" dictionary files:
aircrack-ng -w /usr/share/doc/aircrack-ng/password.lst,big_list.txt psk*.cap
## if you get "No valid WPA handshakes found" message, wait longer or try to deauthenticate an existing wireless client again with aireplay-ng as shown above

## to automatically crack WEP and WPA/WPA2-protected networks, use:
sudo besside-ng wlp11s0mon
## the WEP packets and IVs are written to the "wep.cap", they can be processed with
aircrack-ng wep.cap
## the WPA handshakes and IVs are written to the "wpa.cap" file which can be sent to the WPA-cracking server already during the attack:
sudo besside-ng -s "wpa.darkircop.org" wlp11s0mon
## or it can be processed with
aircrack-ng -w /usr/share/doc/aircrack-ng/password.lst wpa.cap

## crack WPA/WPA2-protected networks via a brute force attack against WPS:
### find a target with WPS enabled:
sudo wash -i wlp11s0mon
### try to crack an AP with "00:14:6C:7E:40:80" MAC address:
reaver -i wlp11s0mon -b 00:14:6C:7E:40:80 -vv

## switch WNIC back into the station mode to connect to a cracked network:
sudo airmon-ng stop wlp11s0mon
--------------------------------------------------------------------------------

# limit the bandwith on eth0 interface to 56 kbit/s (e.g. to simulate slow network connection):
sudo tc qdisc add dev eth0 root handle 1: htb default 12
sudo tc class add dev eth0 parent 1:1 classid 1:12 htb rate 56kbit ceil 56kbit
sudo tc qdisc add dev eth0 parent 1:12 netem delay 200ms

# turn off the bandwidth restriction on eth0:
sudo tc qdisc del dev eth0 root

# show listening ports:
netstat -tnlp

# check if port 22 is open on a remote host:
telnet erwin.oakland.edu 22

# set/change the hostname:
hostnamectl set-hostname mcb

# list available wireless frequencies:
iwlist freq

================================================================================
octave
================================================================================
# physical constants:
pkg load miscellaneous
eps0 = physical_constant("electric constant")

================================================================================
remind
================================================================================
# useful system variables:
$T = trigdate()
$Ty = year(trigdate())
$U = today()
$Uy = year(today())

# set string variable:
SET title "\"Poirot\""
REM 10 Jul 2017 ++2 MSG Watch [title] %a.
REM 10 Aug 2017 ++2 MSG Watch [title] %a.

# the global omits influence the counting of "+" delta and "-" back forms
# no omits influence the counting of "++" delta and "--" back forms

# the following script:
-------------------------------------------------------
$HOME/test.rem
-------------------------------------------------------
OMIT 1 Jan MSG New Year
OMIT 24 Dec MSG Christmas Eve
OMIT 25 Dec MSG 1st day of Christmas
OMIT 26 Dec MSG 2nd day of Christmas
REM 25 MSG Backup
REM 3 +4 MSG Rent
REM 1 -7 MSG Meeting
# Jan 3rd - 4 days = Dec 30th
# Jan 1st - 7 days = Dec 25th
-------------------------------------------------------
# which can be tested with e.g.
remind test.rem 2015-12-22
# in December/January issues the reminder for:
## "Backup" on Dec 25th, since global omits influence the counting of the "+" delta and "-" back forms only, and there is none here, so it doesn't matter that Dec 25th is omitted (to actually omit it, use the "SKIP"/"BEFORE"/"AFTER" commands)
## "Rent" on Jan 3rd, with the advance warning starting already on Dec 29th (instead of Dec 30th), since on the way there is one omitted day (Jan 1st):
### Jan 3rd - 4 days (from "+4") - 1 day (from omits) = Dec 29th (not omitted, don't move further back)
## "Meeting" on Dec 22nd (instead of Dec 25th), since on the way there are three omitted days (Dec 25th, Dec 26th and Jan 1st):
### Jan 1st - 7 days (from "-7") - 3 days (from omits) = Dec 22th (not omitted, don't move further back)

# but the following script:
-------------------------------------------------------
(...)
REM 3 ++4 MSG Rent
REM 1 --7 +1 MSG Meeting
-------------------------------------------------------
# in December/January issues the reminder for:
## "Rent" on Jan 3rd, with the advance warning starting on Dec 30th
## "Meeting" on Dec 25th, with the advance warning starting already on Dec 23rd (instead of Dec 24th) since for "+1" delta there is one omitted day (Dec 24th):
### Dec 25th - 1 day (from "+1") - 1 day (from omits) = Dec 23rd (not omitted, don't move further back)

# but for the following script:
-------------------------------------------------------
(...)
REM 25 SKIP MSG Backup
REM 1 --7 +1 SKIP MSG Meeting
-------------------------------------------------------
# no reminder for "Backup" is issued because of "SKIP"
# in December no reminder is issued for neither "Backup" nor "Meeting", since the Dec 25th is excluded by the "SKIP" command
# if we use "BEFORE" instead of "SKIP", the reminders are issued on Dec 23rd, with the advance warning for "Meeting" starting on Dec 22nd
# if we use "AFTER" instead of "SKIP", the reminders are issued on Dec 27th, with the advance warning for "Meeting" starting already on Dec 23rd (instead of Dec 26th) since "+1" delta moves the advance warning past the omitted days:
## Dec 27th - 1 day (from "+1") =
	Dec 26th (omitted, move back) →
	Dec 25th (omitted, move back) →
	Dec 24th (omitted, move back) →
	Dec 23rd (not omitted, don't move further back)

# note that the following script:
-------------------------------------------------------
(...)
REM 1 -7 +1 SKIP Meeting
-------------------------------------------------------
# is not influenced at all by the "SKIP" command as the global omits influence "-7" back form and move the date back past the omitted days so that the "Meeting" reminder is issued on Dec 22nd, with the advance warning starting on Dec 21st
# thus
REM 1 -7 +1 Meeting
# yields the same results

# obviously, the "SKIP"/"BEFORE"/"AFTER" commands shouldn't be used with "-" back form only which always moves the trigger date past the omitted days, so they serve no purpose

# the following script:
-------------------------------------------------------
$HOME/.reminders
-------------------------------------------------------
OMIT 11 Nov MSG Independence Day
REM Wed +1 AFTER MSG Meeting
-------------------------------------------------------
# in November 2015 (Nov 11th = Wednesday) issues the "Meeting" reminder on Nov 12th, but with the advance warning starting already on Nov 10th (instead of Nov 11th) since for "+1" delta there is one omitted day (Nov 11th), and:
## Nov 12th - 1 day (from "+1") - 1 day (from omits) = Nov 10th

# the following script:
-------------------------------------------------------
$HOME/.reminders
-------------------------------------------------------
FSET omitJulAug(x) isomitted(x) || (monnum(x) == 7) || (monnum(x) == 8)
REM Fri +1 OMITFUNC omitJulAug SKIP AT 19:00 +45 MSG Lesson
-------------------------------------------------------
# in 2018 doesn't issue any "Lesson" advance warnings in July nor August, but in 2017 issues that each day in July and August since Sep 1st = Friday, so "+1" moves the warning past the omitted days, which results in triggering the warning every day in those months
# it's better to use the "++1" delta form:
REM Fri ++1 OMITFUNC omitJulAug SKIP AT 19:00 +45 MSG Lesson
# resulting in the advance warning issued on last day in August 2017

# an event occurring on first Saturday of a month with the exception of July and August, moved back one week for each omitted Saturday:
REM Sat 1 --7 SATISFY ($Tm != 7 && $Tm != 8)
REM [$T] ++1 OMIT Sun Mon Tue Wed Thu Fri BEFORE AT 18:00 MSG Meeting %a %3.

# use "SCANFROM" with floating events, so that the event is still seen after it occurred:
REM Mon 1 Sep SCANFROM [$U - 7] SATISFY 1
OMIT [$T]
REM Mon AFTER MSG Meeting
# the "Mon 1 Sep" reminder is triggered every first Monday in September (Labour Day), which can move over a range of 7 days
# without "SCANFROM", on first Tuesday in September remind wouldn't count the previous Monday as omitted (we assume there no other omits) as it by default scans starting with the current date, so "Meeting" wouldn't be at all triggered that Tuesday
# with "SCANFROM" the "Meeting" is properly triggered on first Tuesday in September, but as there might be other omits, it's safer to use 7 days with "SCANFROM"

# Easter date:
## easterdate($U) = the date of the next Easter Sunday on or after $U
## easterdate($Uy) = the date of Easter Sunday for the current year
# so the following
SET edate easterdate($U)
REM [edate + 1] MSG Easter Monday
# wouldn't trigger "Easter Monday" reminder at all, since on Easter Monday "easterdate($U)" already yields the date of the Easter Sunday in the following year, so use
SET edate easterdate($Uy)
REM [edate + 1] MSG Easter Monday.
# instead

================================================================================
rsync / rsnapshot
================================================================================
# get a remote file that has spaces in its name − use double escape:
rsync -avPz -e ssh luke@super.cluster.somewhere:"file\ with\ some\ spaces\ in\ it.dat" "$HOME/Desktop"

# sync files to a FAT disk (e.g. USB drive) − use "--modify-window=1" option:
rsync -aPv --modify-window=1 Desktop/Data /Volumes/KINGSTON

# sync directory preserving hard links − use "-H" option:
rsync -ahHPvz src dest

# sync directories using filter file: create a file, say "$HOME/rsync_filter" (notice how the spaces are handled − they need not be escaped in a filter file), e.g.
-------------------------------------------------------
$HOME/rsync_filter
-------------------------------------------------------
-p .DS_Store
- luke/fuse/
- luke/Desktop/Varieties/Movies/
- luke/Library/Application Support/
- luke/.kde/
- luke/install/
-------------------------------------------------------
# and then use:
rsync -ahPvz --filter=". $HOME/rsync_filter" "$HOME" /backup

--------------------------------------------------------------------------------
# filter patterns (file in general refers to directory as well, we assume we use rsync command with options as listed above):
--------------------------------------------------------------------------------
## rsync builds a list of files to be transferred in a similar way "find directory | sort" lists files, but for each file a pattern list is checked until the first matching pattern is found (if it's an exclude pattern, file is skipped, and vice versa, but if no pattern matches a file, it's not skipped), thus if the directory is excluded, it won't be descended into

## if the pattern contains "/" (not counting the trailing "/") or "**", it's matched against the pathname, otherwise it's matched against its final component (filename)

## the filter rules:
+ luke/Pictures/
- luke/*
## match everything in paths containing "luke/Pictures/", but exclude everything else
## the files in "luke/Pictures/" are not skipped, though "+ luke/Pictures/" matches only that dir, however, no filter pattern to be applied is found e.g. for "luke/Pictures/img.jpg" file as "- luke/*" excludes directories and files under "luke" ("*" stops at slashes), so "luke/Pictures/img.jpg" is not skipped

## the filter rule:
+ software/molpro
- *
## won't match anything, because rsync first gets "software/" component checked before descending to "software/molpro" component and "software/" is excluded by "- *"

## the filter rules:
+ Varieties/
+ Varieties/Movies/
+ Varieties/Movies/Screens/
- Varieties/Movies/*
- Varieties/*
## match only the directories and files in "Varieties/Movies/Screens/" and skip everything else under "Varieties/":
## we need "- Varieties/Movies/*" so that directories and files apart from "Screens/" in "Varieties/Movies/" are skipped, as "- Varieties/*" wouldn't exclude them ("*" stops at slashes)

## but note that the filter rules:
+ Varieties/
+ Varieties/Movies/
+ Varieties/Movies/Screens/
- Varieties/**
## only match "Varieties/Movies/Screens/" and no files within − all files are excluded by the "- Varieties/**" ("**" doesn't stop at slashes)

## "Unable to delete non-empty directory" error is usually triggered by files which become excluded by filter rules and are left on a receiver in directories which have been deleted on a sender: e.g. after some rsync actions lots of ".DS_Store" files have been copied to a receiver and now we add an exclude rule for them and delete some directories containing them on a sender − rsync won't delete those directories on a receiver since they are not empty as they still contain ".DS_Store" files: the solution is to use a perishable ("p") modifier which makes a rule perish for a directory which is to be deleted (this way the file is not excluded by the already perished rule and gets deleted, thus emptying the directory it's in):
rsync -ahPvz --delete -f "-p .DS_Store" Articles backup
--------------------------------------------------------------------------------

# update only pdf files and skip all other directories:
## we need to include "*.pdf" files
## but by default everything is included, so above rule wouldn't make sense on its own: we need to exclude other files, we do so with "-! */"
## that still includes all directories, but we don't need to copy directories without pdf files under them − so we prune them:
rsync -ahPvz --prune-empty-dirs --delete --include="*.pdf" -f "-! */" Articles backup

# update only the directory tree or copy only the directory structure:
## we use a filter rule to include all the directories, "+ */", and then a rule to exclude all the files, "- *":
rsync -av -f "+ */" -f "- *" /src/foo /dest

# update only the directory tree or copy only the directory structure of the first subdirectory level only:
rsync -av -f "+ /*/" -f "- *" /src/foo /dest

# update all but some directories in the "src" directory and skip all the files directly under "src":
-------------------------------------------------------
$HOME/rsync_filter
-------------------------------------------------------
- src/no1/
- src/no2/
- src/no3/
+ src/**/
- src/*
-------------------------------------------------------
# and then use:
rsync -ahPvz --filter=". $HOME/rsync_filter" src dest
# note that all files under, say, "src/yes" are updated: though the "+ src/**/" rule matches directories only, those files are not excluded (nor included) by any rule, no rule applies to them, so implicitly they are included

# the trailing slash in the source directory:
rsync -av /run/CD/ .
# avoids creating an additional directory (here: "CD") at the destination (here: ".", so a current directory), with the attributes of the source directory (here: "/run/CD") transferred to the destination directory (here: current directory), but:
rsync -av /run/CD/* .
# doesn't change the attributes of the destination directory (here: current directory), since "/run/CD/*" is expanded by the shell to the listing of the source directory, but apart from that both variants have the same results if "dotglob" option is set (without it "*" won't expand into hidden files)
# thus the two commands have the same results:
rsync -av /src/foo /dest
rsync -av /src/foo/ /dest/foo

# using "." as the source directory makes rsync behave as if the trailing slash were present, thus all three commands have the same results:
rsync -av src/ dest
cd src && rsync -av . ../dest
cd src && rsync -av ./ ../dest

# make a list of files which would be replaced skipping existing files on the receiver:
rsync -ahPvz --ignore-existing -n -i /media/luke /home &> log.txt

--------------------------------------------------------------------------------
# use rsnapshot to back up directories on a remote machine (say, called remote) as a root user: on remote:
--------------------------------------------------------------------------------
## edit "/etc/ssh/sshd_config" so that it contains a line:
PermitRootLogin forced-commands-only

## put a perl script called rrsync (which usually comes with rsync installation) in /usr/bin/rrsync and make it executable

## place local machine's public SSH key in "/root/.ssh/authorized_keys" and prepend it on a single line as follows:
commmand="/usr/bin/rrsync -ro /" ssh-rsa (the proper key follows)

## then on a local machine (which carries out backups) you can put in "/etc/rsnapshot.conf" the lines as such:
backup	root@remote:/home/	remote-home/
--------------------------------------------------------------------------------

================================================================================
screen / tmux (terminal multiplexers)
================================================================================
--------------------------------------------------------------------------------
# screen
--------------------------------------------------------------------------------
# run a command in a new session called "compile", log all output to a file ("screenlog.n") and detach:
screen -dmLS compile ./script.sh
# run a command in a new session called "compile", log all output to a file ("screenlog.n") and detach in case you need "$LD_LIBRARY_PATH":
screen -dmLS compile bash -lc "make -j12"
# list sessions:
screen -ls
# attach a session (pid.tty.host):
screen -r 4194..fermi
# detach from a current session:
<CTRL>+"a" "d"

--------------------------------------------------------------------------------
# tmux
--------------------------------------------------------------------------------
# split window into top/bottom panes:
C-b "
# split window into left/right panes:
C-b %
# switch panes
c-b ;

================================================================================
spell checking
================================================================================
# spell-check a LaTeX file:
aspell -t check file.tex

# spell checking in vi:
:set spell
# to go to the next/previous error: "]s"/"[s", variants: "z="

================================================================================
shared libraries
================================================================================
# "*.so" shared-library files in non-standard locations, say "/opt/libs", can be added by:

## adding the location to the "$LD_LIBRARY_PATH":
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/libs

## rebuilding the cache stored in "/etc/ld.so.cache" (preferred way):
sudo -i
echo "/opt/libs" > /etc/ld.so.conf.d/optlibs.conf
ldconfig

# list libraries that a command, say "molpro", depends on:
ldd molpro

================================================================================
WWW
================================================================================
# search the archives of the mailman mailing lists: type the following in Google (octopus mailing list as an example):
inurl:http://www.tddft.org/pipermail/octopus-users/ something
